<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Linguistics.Types</name>
    </assembly>
    <members>
        <member name="T:Linguistics.Core.Configurations.ConfigException">
            <summary>
            Configuration reading exception
            </summary>
        </member>
        <member name="M:Linguistics.Core.Configurations.ConfigException.#ctor(System.String)">
            <summary>
            Creates new configuration exception instance with defined message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Linguistics.Core.Configurations.ConfigException.#ctor(System.String,System.Exception)">
            <summary>
            Creates new configuration exception instance with defined message and inner exception
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Linguistics.Core.Configurations.ConfigException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates new configuration exception instance
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Linguistics.Core.Configurations.ConfigurationBase">
            <summary>
            Base class for xml-based configurations
            </summary>
        </member>
        <member name="F:Linguistics.Core.Configurations.ConfigurationBase.DigestSectionName">
            <summary>
            Digest config section name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Configurations.ConfigurationBase.OpinionMiningSectionName">
            <summary>
            OM config section name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Configurations.ConfigurationBase.TonalityMarkingSectionName">
            <summary>
            Sentiment analysis config section name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Configurations.ConfigurationBase.LinguisticsSectionName">
            <summary>
            Linguistics config section name
            </summary>
        </member>
        <member name="M:Linguistics.Core.Configurations.ConfigurationBase.#ctor(System.String)">
            <summary>
            Creates new config from configuration section
            </summary>
            <param name="sectionName"></param>
        </member>
        <member name="M:Linguistics.Core.Configurations.ConfigurationBase.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Creates new configuration based on given xml section
            </summary>
            <param name="configSection"></param>
        </member>
        <member name="M:Linguistics.Core.Configurations.ConfigurationBase.GetSubSection(System.String)">
            <summary>
            Returns subsection of config section
            </summary>
            <param name="subSectionName"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Configurations.ConfigurationBase.GetFilename(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Returns file path constructed using base directory and value from xpath evaluation
            </summary>
            <param name="node"></param>
            <param name="fileNameXpath"></param>
            <param name="basePath"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Configurations.ConfigurationBase.GetAttributeNode(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns configuration attribute
            </summary>
            <param name="element"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.Configurations.ConfigurationBase.ConfigSection">
            <summary>
            Configuration section xml
            </summary>
        </member>
        <member name="T:Linguistics.Core.Configurations.LinguisticsConfiguration">
            <summary>
            Linguistics configuration class
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Configuration.ILinguisticsConfiguration">
            <summary>
            Linguistics module configuration
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.ILinguisticsConfiguration.MinEntityLength">
            <summary>
            Minimum entity length
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.ILinguisticsConfiguration.MaxEntityLength">
            <summary>
            Maximum entity length
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.ILinguisticsConfiguration.RootDirectoryPath">
            <summary>
            Path to user resources folder
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.ILinguisticsConfiguration.UserResourcesPath">
            <summary>
            Path to user resources folder
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.ILinguisticsConfiguration.UseGeoNamesDictionary">
            <summary>
            Indicates whenever geo names dictionary should be used
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.ILinguisticsConfiguration.TypesThatShouldBeFiltered">
            <summary>
            Array of types names that should not be treated as valid themes
            </summary>
        </member>
        <member name="M:Linguistics.Core.Configurations.LinguisticsConfiguration.#ctor(System.String)">
            <summary>
            Creates new linguistics configuration
            </summary>
            <param name="pathToRootFolder"></param>
        </member>
        <member name="P:Linguistics.Core.Configurations.LinguisticsConfiguration.MinEntityLength">
            <summary>
            Minimum entity's value length
            </summary>
        </member>
        <member name="P:Linguistics.Core.Configurations.LinguisticsConfiguration.MaxEntityLength">
            <summary>
            Maximum entity's value length
            </summary>
        </member>
        <member name="P:Linguistics.Core.Configurations.LinguisticsConfiguration.RootDirectoryPath">
            <summary>
            Path to root directory (working directory)
            </summary>
        </member>
        <member name="P:Linguistics.Core.Configurations.LinguisticsConfiguration.UserResourcesPath">
            <summary>
            Path to user resources
            </summary>
        </member>
        <member name="P:Linguistics.Core.Configurations.LinguisticsConfiguration.UseGeoNamesDictionary">
            <summary>
            Should or not use geography dictionary
            </summary>
        </member>
        <member name="P:Linguistics.Core.Configurations.LinguisticsConfiguration.TypesThatShouldBeFiltered">
            <summary>
            list of types that should be filtered
            </summary>
        </member>
        <member name="T:Linguistics.Core.Configurations.LinguisticsConfigurationHandler">
            <summary>
            Configration handler
            </summary>
        </member>
        <member name="M:Linguistics.Core.Configurations.LinguisticsConfigurationHandler.ToXDocument(System.Xml.XmlNode)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.Const">
            <summary>
            Notations
            Postfixes:
            	S		-> string
            	C		-> char
            	SArr	-> array of strings
            	CArr	-> array of chars
            	RxG		-> regular expression group
            	Sep		-> separator
            	Pnt		-> point
            	Qst		-> question
            
            Prefixes:
            	Sm		-> Semi- (ex. SemiColon -> SmColon)
            	Sl		-> slash (/)
            	Bsl		-> back slash (\)
            	Mrk		-> mark (ex. question mark -> QstMrk)
            	Excl	-> Exclamation (ex. Exclamation point -> ExclPnt)
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.AverageWordLength">
            <summary>
            Average word length
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Null">
            <summary>
            Null value string representation
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.ValueGroupName">
            <summary>
            Имя группы со значением сущности
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SpaceS">
            <summary>
            String with space
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SpaceC">
            <summary>
            Space char
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.MinLengthAbbrInclusive">
            <summary>
            Min abbreviation length
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.MaxLengthAbbrInclusive">
            <summary>
            Max abbreviation length
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.DotS">
            <summary>
            Dot{{.}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.DotC">
            <summary>
            Dot{{.}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.AtC">
            <summary>
            At {{@}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.AtS">
            <summary>
            At {{@}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SharpC">
            <summary>
            Sharp {{#}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SharpS">
            <summary>
            Sharp {{#}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.UnderScC">
            <summary>
            Underscore character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.CommaS">
            <summary>
            Comma {{,}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.CommaC">
            <summary>
            Comma {{,}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SlashC">
            <summary>
            Slash {{/}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BSlashC">
            <summary>
            Back slash {{\}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SlashS">
            <summary>
            Slash {{/}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BSlashS">
            <summary>
            Back slash {{\}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.ColonS">
            <summary>
            Colon {{:}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.ColonC">
            <summary>
            Colon {{:}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Plus">
            <summary>
            Plus character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.PlusS">
            <summary>
            Plus string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BracketO">
            <summary>
            Opening brackey string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BracketC">
            <summary>
            Closing brackey string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BracketOc">
            <summary>
            Opening brackey character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BracketCc">
            <summary>
            Closing brackey character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SmColonS">
            <summary>
            SemiColon {{;}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SmColonC">
            <summary>
            SemiColon {{;}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.ExclPntS">
            <summary>
            Exclamation Point {{!}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.ExclPntC">
            <summary>
            Exclamation Point {{!}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.AstertS">
            <summary>
            Asterisk {{*}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.AsterC">
            <summary>
            Asterisk {{*}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.EqualsS">
            <summary>
            Equals sign {{=}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.EqualsC">
            <summary>
            Equals sign {{=}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.QstMrkS">
            <summary>
            Question Mark {{?}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.QstMrkC">
            <summary>
            Question Mark {{?}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.EllipsisS">
            <summary>
            Points of ellipsis {{…}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.EllipsisC">
            <summary>
            Points of ellipsis {{…}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.DashS">
            <summary>
            Dash {{-}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.DashC">
            <summary>
            Dash {{-}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SingleQuoteS">
            <summary>
            Single quote {{'}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SingleQuoteC">
            <summary>
            Single quote {{'}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.DoubleQuoteS">
            <summary>
            Double quote {{"}} string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.DoubleQuoteC">
            <summary>
            Double quote {{"}} character
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BslNS">
            <summary>
            \n string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BslNC">
            <summary>
            \n char
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BslRS">
            <summary>
            \r string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BslRC">
            <summary>
            \r char
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.TabS">
            <summary>
            \t string
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.TabC">
            <summary>
            \t char
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SpaceSArr">
            <summary>
            Space string array
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.SpaceCArr">
            <summary>
            Space char array
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.HyphenSArr">
            <summary>
            Array of hyphen strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.HyphenCArr">
            <summary>
            Array of hyphen characters
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.HyphensCSet">
            <summary>
            Set of hyphen chars
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.CommaCArr">
            <summary>
            Comma char array
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.BracketsSetC">
            <summary>
            Hashset of brackets
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.TabCArr">
            <summary>
            Array that contains '\t'
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.OpenQuotesSArr">
            <summary>
            Array of open quotes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.CloseQuotesSArr">
            <summary>
            Array of close quotes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.OpenQuotesCArr">
            <summary>
            Array of open quotes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.OpenQuotesCSet">
            <summary>
            Set of open quote
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.CloseQuotesCArr">
            <summary>
            Array of close quotes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.CloseQuotesCSet">
            <summary>
            Set of close quotes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.AllQuotesCArr">
            <summary>
            Array that contains all quotes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.WordSepCArr">
            <summary>
            Word separators char array
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.WordSepSArr">
            <summary>
            Word separators string array
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.Const.Warnings">
            <summary>
            Warning messages container
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Warnings.PerformanceImpact">
            <summary>
            Performance impact source message
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.Const.Crf">
            <summary>
            Crf constants
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.BeginOfSentence">
            <summary>
            Обозначение начала предложения (в формате SRFSuit)
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.EndOfSentence">
            <summary>
            Обозначение конца предложения (в формате SRFSuit)
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.BPerson">
            <summary>
            Beggining of person tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.IPerson">
            <summary>
            Inner part of person tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.BOrg">
            <summary>
            Beggining of organization tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.IOrg">
            <summary>
            Inner part of organization tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.BGeo">
            <summary>
            Beggining of location tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.IGeo">
            <summary>
            Inner part of location tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.BEvent">
            <summary>
            Beggining of event tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.IEvent">
            <summary>
            Inner part of event tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.BProduct">
            <summary>
            Beggining of product tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.IProduct">
            <summary>
            Inner part of product tag
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.Const.Crf.Unknown">
            <summary>
            Unknown part tag
            </summary>
        </member>
        <member name="T:Linguistics.Core.DocumentType">
            <summary>
            Тип документа
            </summary>
        </member>
        <member name="F:Linguistics.Core.DocumentType.Default">
            <summary>
            Default document type
            </summary>
        </member>
        <member name="T:LingvisticServer.EntityTypesExtension">
            <summary>
            Extension for entity type enum
            </summary>
        </member>
        <member name="M:LingvisticServer.EntityTypesExtension.GetDescription(Linguistics.Core.Enums.EntityType)">
            <summary>
            Returns Russian description for <paramref name="entityType"/>
            </summary>
            <param name="entityType">input entity type</param>
            <returns>string with russian description or null (description was not found)</returns>
        </member>
        <member name="M:LingvisticServer.EntityTypesExtension.GetEntityTypeDescriptionByItsId(System.Int32)">
            <summary>
            Returns russian description for entity type identificator
            Returns <seealso cref="F:Linguistics.Core.Enums.EntityType.Unknown"/> description if id is not supported
            </summary>
            <param name="entityTypeId"></param>
            <returns></returns>
        </member>
        <member name="T:Lingvistic.LinkItem">
            <summary>
            Связь
            </summary>
        </member>
        <member name="M:Lingvistic.LinkItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Lingvistic.LinkItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Lingvistic.LinkItem.SourceThemeID">
            <summary>
            Идентификатор первой темы
            </summary>
        </member>
        <member name="P:Lingvistic.LinkItem.DestThemeID">
            <summary>
            Идентификатор второй темы
            </summary>
        </member>
        <member name="P:Lingvistic.LinkItem.Type">
            <summary>
            Тип связи
            </summary>
        </member>
        <member name="P:Lingvistic.LinkItem.Freq">
            <summary>
            Частота связи
            </summary>
        </member>
        <member name="T:Lingvistic.RdfResult">
            <summary>
            Text processing result
            </summary>
        </member>
        <member name="P:Lingvistic.RdfResult.Rdf">
            <summary>
            Xml document that contains text syntax-semantic tree
            </summary>
        </member>
        <member name="P:Lingvistic.RdfResult.TextElement">
            <summary>
            Resulting TextElement
            </summary>
        </member>
        <member name="P:Lingvistic.RdfResult.NormalText">
            <summary>
            Normalized text
            </summary>
        </member>
        <member name="P:Lingvistic.RdfResult.TextRanges">
            <summary>
            Exctracted text ranges
            </summary>
        </member>
        <member name="T:Linguistics.Core.SelectEntitiesMode">
            <summary>
            Entities selection mode
            </summary>
        </member>
        <member name="F:Linguistics.Core.SelectEntitiesMode.Full">
            <summary>
            Uses all available entities recognition methods (Simple + NER + Semantic Dictionary)
            </summary>
        </member>
        <member name="F:Linguistics.Core.SelectEntitiesMode.Simple">
            <summary>
            Recognizes specific entities using regular expression
            </summary>
        </member>
        <member name="F:Linguistics.Core.SelectEntitiesMode.Lexica">
            <summary>
            Executes lexical processing and returns xml view of lexical tree
            </summary>
        </member>
        <member name="F:Linguistics.Core.SelectEntitiesMode.Syntax">
            <summary>
            Executes syntax processing and returns xml view of syntax tree
            </summary>
        </member>
        <member name="T:Lingvistic.SemanticNet">
            <summary>
            Семантическая сеть
            </summary>
        </member>
        <member name="M:Lingvistic.SemanticNet.#ctor">
            <summary>
            Creates new semantic network
            </summary>
        </member>
        <member name="M:Lingvistic.SemanticNet.#ctor(Lingvistic.ThemeItem[],Lingvistic.LinkItem[],Lingvistic.ThemePositionItem[])">
            <summary>
            crates new semantic network instance
            </summary>
            <param name="themeList"></param>
            <param name="linkList"></param>
            <param name="themePositionList"></param>
        </member>
        <member name="P:Lingvistic.SemanticNet.ThemeList">
            <summary>
            Темы
            </summary>
        </member>
        <member name="P:Lingvistic.SemanticNet.LinkList">
            <summary>
            Связи
            </summary>
        </member>
        <member name="P:Lingvistic.SemanticNet.ThemePositionList">
            <summary>
            Позиции тем
            </summary>
        </member>
        <member name="T:Linguistics.Core.SourceType">
            <summary>
            Тип источника
            </summary>
        </member>
        <member name="F:Linguistics.Core.SourceType.PlaintText">
            <summary>
            Плоский текст
            </summary>
        </member>
        <member name="F:Linguistics.Core.SourceType.PatentXml">
            <summary>
            Патентный Xml
            </summary>
        </member>
        <member name="T:Lingvistic.ThemeItem">
            <summary>
            Тема
            </summary>
        </member>
        <member name="M:Lingvistic.ThemeItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Lingvistic.ThemeItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Lingvistic.ThemeItem.ID">
            <summary>
            Идентификатор
            </summary>
        </member>
        <member name="P:Lingvistic.ThemeItem.Name">
            <summary>
            Нормализованное значение
            </summary>
        </member>
        <member name="P:Lingvistic.ThemeItem.OriginalName">
            <summary>
            Исходная форма
            </summary>
        </member>
        <member name="P:Lingvistic.ThemeItem.Type">
            <summary>
            Семантический тип int value represents value of <seealso cref="T:Linguistics.Core.Enums.EntityType"/>
            </summary>
        </member>
        <member name="P:Lingvistic.ThemeItem.FreqSubj">
            <summary>
            Частота в роли подлежащего
            </summary>
        </member>
        <member name="P:Lingvistic.ThemeItem.FreqObj">
            <summary>
            Частота в роли дополнения
            </summary>
        </member>
        <member name="P:Lingvistic.ThemeItem.FreqAdj">
            <summary>
            Частота в роли обстоятельства
            </summary>
        </member>
        <member name="P:Lingvistic.ThemeItem.FreqOther">
            <summary>
            Частота внутренней цепочки
            </summary>
        </member>
        <member name="P:Lingvistic.ThemeItem.Freq">
            <summary>
            Суммарная частота
            </summary>
        </member>
        <member name="T:Lingvistic.ThemePositionItem">
            <summary>
            Позиция темы
            </summary>
        </member>
        <member name="M:Lingvistic.ThemePositionItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Lingvistic.ThemePositionItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Lingvistic.ThemePositionItem.ThemeID">
            <summary>
            Идентификатор темы
            </summary>
        </member>
        <member name="P:Lingvistic.ThemePositionItem.StartPosition">
            <summary>
            Начало
            </summary>
        </member>
        <member name="P:Lingvistic.ThemePositionItem.Length">
            <summary>
            Длина
            </summary>
        </member>
        <member name="T:Linguistics.Core.DataStructures.StringPart">
            <summary>
            Represents part of string builder
            </summary>
        </member>
        <member name="F:Linguistics.Core.DataStructures.StringPart.Start">
            <summary>
            Start position in inner builder
            </summary>
        </member>
        <member name="F:Linguistics.Core.DataStructures.StringPart.Length">
            <summary>
            Length of part
            </summary>
        </member>
        <member name="M:Linguistics.Core.DataStructures.StringPart.#ctor(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Creates new part of string
            </summary>
            <param name="builder"></param>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="M:Linguistics.Core.DataStructures.StringPart.GetText">
            <summary>
            Returns text that is represented by this text part
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.DataStructures.StringPart.Append(Linguistics.Core.DataStructures.StringPart)">
            <summary>
            Appends another part to this part
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:Linguistics.Core.DataStructures.StringPart.Append(System.String)">
            <summary>
            Appends another part to this part
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:Linguistics.Core.DataStructures.StringPart.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.MorphoDictType">
            <summary>
            Represents type of morpho dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoDictType.Abbreviation">
            <summary>
            Abbreviation dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoDictType.Proper">
            <summary>
            ProperName dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoDictType.Nominal">
            <summary>
            NominalName dictionary
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.NerType">
            <summary>
            Ner entity type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.NerType.Person">
            <summary>
            Person type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.NerType.Org">
            <summary>
            Organization type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.NerType.Product">
            <summary>
            Product type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.NerType.Event">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.NerType.Location">
            <summary>
            Location type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.NerType.Undefined">
            <summary>
            Undefined type
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemMeasureType">
            <summary>
            measure semntics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Weight">
            <summary>
            Weight
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Surface">
            <summary>
            Surface
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Speed">
            <summary>
            Speed
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Depth">
            <summary>
            Depth
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Age">
            <summary>
            Age
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMeasureType.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.CoreferenceType">
            <summary>
            Тип кореферентности
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.CoreferenceType.Default">
            <summary>
            Не определен
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.CoreferenceType.Person">
            <summary>
            Кореферентность персон
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.CoreferenceType.Organization">
            <summary>
            Кореферентность организаций
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.CoreferenceType.WeakOrganization">
            <summary>
            Организации не типа OrgName
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.CoreferenceType.Abbreviation">
            <summary>
            Разрешение аббревиатур
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.CoreferenceType.Unknown">
            <summary>
            Разрешение цепочек существительных
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.JobProfile">
            <summary>
            Профиль задачи
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.JobProfile.SemanticNetwork">
            <summary>
            Построение семантической сети
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.JobProfile.Rospatent">
            <summary>
            Обработка текста со спецификой Rospatent
            </summary>
        </member>
        <member name="T:Linguistics.Core.DataStructures.SimpleStringBuilder">
            <summary>
            Класс для построения строк в нижнем регистре и без повторяющихся пробелов
            </summary>
        </member>
        <member name="F:Linguistics.Core.DataStructures.SimpleStringBuilder.builder">
            <summary>
            Строитель
            </summary>
        </member>
        <member name="F:Linguistics.Core.DataStructures.SimpleStringBuilder.tableShift">
            <summary>
            Таблица сдвигов
            </summary>
        </member>
        <member name="F:Linguistics.Core.DataStructures.SimpleStringBuilder.shift">
            <summary>
            Сдвиг
            </summary>
        </member>
        <member name="F:Linguistics.Core.DataStructures.SimpleStringBuilder.isSpace">
            <summary>
            Встретился пробел
            </summary>
        </member>
        <member name="M:Linguistics.Core.DataStructures.SimpleStringBuilder.#ctor">
            <summary>
            Creates new builder
            </summary>
        </member>
        <member name="M:Linguistics.Core.DataStructures.SimpleStringBuilder.#ctor(System.String)">
            <summary>
            Creates new builder
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Linguistics.Core.DataStructures.SimpleStringBuilder.Append(System.String)">
            <summary>
            Добавление заданной строки
            </summary>
            <param name="value">строка</param>
            <returns>обновленный объект</returns>
        </member>
        <member name="M:Linguistics.Core.DataStructures.SimpleStringBuilder.Append(System.Char)">
            <summary>
            Добавление заданного символа
            </summary>
            <param name="symbol">символ</param>
            <returns>обновленный объект</returns>
        </member>
        <member name="M:Linguistics.Core.DataStructures.SimpleStringBuilder.Clear">
            <summary>
            Очистка строки
            </summary>
        </member>
        <member name="M:Linguistics.Core.DataStructures.SimpleStringBuilder.GetRealPosition(System.Int32)">
            <summary>
            Получение реальной позиции для заданной
            </summary>
            <param name="position">заданная позиция</param>
            <returns>реальная позиция</returns>
        </member>
        <member name="M:Linguistics.Core.DataStructures.SimpleStringBuilder.RemoveFromRealString(System.Int32,System.Int32)">
            <summary>
            Removes interval from real string
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="M:Linguistics.Core.DataStructures.SimpleStringBuilder.InsertIntoRealString(System.Int32,System.String)">
            <summary>
            Inserts fragment inside real string
            </summary>
            <param name="startIndex"></param>
            <param name="fragment"></param>
        </member>
        <member name="P:Linguistics.Core.DataStructures.SimpleStringBuilder.LowerValue">
            <summary>
            Значение в нижнем регистре
            </summary>
        </member>
        <member name="P:Linguistics.Core.DataStructures.SimpleStringBuilder.ActualValue">
            <summary>
            Действительное значение
            </summary>
        </member>
        <member name="P:Linguistics.Core.DataStructures.SimpleStringBuilder.Length">
            <summary>
            Длина
            </summary>
        </member>
        <member name="T:Linguistics.Core.DataStructures.StairTableShift">
            <summary>
            класс для хранения сдвигов с использованием ступенчатой таблицы
            </summary>
        </member>
        <member name="F:Linguistics.Core.DataStructures.StairTableShift.currentShift">
            <summary>
            текущий сдвиг
            </summary>
        </member>
        <member name="F:Linguistics.Core.DataStructures.StairTableShift.shifts">
            <summary>
            список пары позиция-сдвиг
            </summary>
        </member>
        <member name="M:Linguistics.Core.DataStructures.StairTableShift.#ctor">
            <summary>
            Creates new table
            </summary>
        </member>
        <member name="M:Linguistics.Core.DataStructures.StairTableShift.UpdateShift(System.Int32,System.Int32)">
            <summary>
            Обновление текущего сдвига заданными параметрами
            </summary>
            <param name="position">позиция</param>
            <param name="shift">сдвиг</param>
        </member>
        <member name="M:Linguistics.Core.DataStructures.StairTableShift.GetShift(System.Int32)">
            <summary>
            получение сдвига для заданной позиции
            </summary>
            <param name="position">позиция</param>
            <returns>сдвиг</returns>
        </member>
        <member name="M:Linguistics.Core.DataStructures.StairTableShift.Clear">
            <summary>
            Очистка
            </summary>
        </member>
        <member name="T:Linguistics.Core.DataStructures.StairTableShift.ShiftPositionPair">
            <summary>
            пара позиция-сдвиг
            </summary>
        </member>
        <member name="T:Linguistics.Core.DataStructures.TextFragment">
            <summary>
            Часть текста
            </summary>
        </member>
        <member name="M:Linguistics.Core.DataStructures.TextFragment.#ctor">
            <summary>
            Create new fragment
            </summary>
        </member>
        <member name="M:Linguistics.Core.DataStructures.TextFragment.#ctor(System.Int32,System.Int32)">
            <summary>
            Create new fragment
            </summary>
            <param name="start"></param>
            <param name="length"></param>
        </member>
        <member name="P:Linguistics.Core.DataStructures.TextFragment.Start">
            <summary>
            начало
            </summary>
        </member>
        <member name="P:Linguistics.Core.DataStructures.TextFragment.End">
            <summary>
            конец
            </summary>
        </member>
        <member name="P:Linguistics.Core.DataStructures.TextFragment.IsValid">
            <summary>
            Флаг, что заданный интервал корректен
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemanticType">
            <summary>
            Base semantic type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.TimeInterval">
            <summary>
            Time semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Place">
            <summary>
            Place semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Measure">
            <summary>
            Measure semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Person">
            <summary>
            Person semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Organization">
            <summary>
            Organization semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Verb">
            <summary>
            Verb semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Service">
            <summary>
            Service semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Info">
            <summary>
            Infor semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Material">
            <summary>
            Material semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Building">
            <summary>
            Building semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Transport">
            <summary>
            Transport semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Event">
            <summary>
            Event semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemanticType.Product">
            <summary>
            Product semantics
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemArea">
            <summary>
            Area semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemArea.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemArea.District">
            <summary>
            District
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemBuilding">
            <summary>
            Bilding semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemBuilding.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemBuilding.NotUndefine">
            <summary>
            NotUndefine
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemCity">
            <summary>
            City semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemCity.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemCity.Area">
            <summary>
            Area
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemDisasterType">
            <summary>
            Disaster type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemDisasterType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemDisasterType.Earthquake">
            <summary>
            Earthquake
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemDisasterType.Flood">
            <summary>
            Flood
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemDistrict">
            <summary>
            District semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemDistrict.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemDistrict.DistrMetro">
            <summary>
            DistrMetro
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemEventType">
            <summary>
            Event types
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemEventType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemEventType.Disaster">
            <summary>
            Disaster
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemEventType.PlannedEvent">
            <summary>
            PlannedEvent
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemGeneric">
            <summary>
            Generic type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemGeneric.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemGeneric.Generic">
            <summary>
            Generic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemGeneric.NotGeneric">
            <summary>
            NotGeneric
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemInfo">
            <summary>
            Infor semantic 
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemInfo.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemInfo.InfoSite">
            <summary>
            InfoSite
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemInfo.InfoMail">
            <summary>
            InfoMail
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemInfo.InfoTelefon">
            <summary>
            InfoTelefon
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemInfo.InfoPlace">
            <summary>
            InfoPlace
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemMaterial">
            <summary>
            Material semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMaterial.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMaterial.Manufacture">
            <summary>
            Manufacture
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMaterial.Food">
            <summary>
            Food
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMaterial.Clothes">
            <summary>
            Clothes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMaterial.Instrument">
            <summary>
            Instrument
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMaterial.Goods">
            <summary>
            Goods
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMaterial.Banknote">
            <summary>
            Banknote
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMaterial.ForFreeTime">
            <summary>
            ForFreeTime
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemMetro">
            <summary>
            Metro type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Street">
            <summary>
            Street
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Pereulok">
            <summary>
            Pereulok
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Proezd">
            <summary>
            Proezd
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Tupik">
            <summary>
            Tupik
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Prospekt">
            <summary>
            Prospekt
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Ploshad">
            <summary>
            Ploshad
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Bulvar">
            <summary>
            Bulvar
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Alleya">
            <summary>
            Alleya
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Naberezhnaya">
            <summary>
            Naberezhnaya
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMetro.Liniya">
            <summary>
            Liniya
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemMFood">
            <summary>
            Material food semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Dish">
            <summary>
            Dish
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Bread">
            <summary>
            Bread
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Milk">
            <summary>
            Milk
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Meat">
            <summary>
            Meat
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Fish">
            <summary>
            Fish
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Vegetables">
            <summary>
            Vegetables
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Drink">
            <summary>
            Drink
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Alcohol">
            <summary>
            Alcohol
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Sweets">
            <summary>
            Sweets
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMFood.Fruit">
            <summary>
            Fruit
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemMForFreeTime">
            <summary>
            Free time semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMForFreeTime.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMForFreeTime.Sport">
            <summary>
            Sport
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMForFreeTime.Toys">
            <summary>
            Toys
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemMForFreeTime.Music">
            <summary>
            Music
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemOrganizationType">
            <summary>
            organization semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.Company">
            <summary>
            Company
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.Bank">
            <summary>
            Bank
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.InternationalOrganization">
            <summary>
            InternationalOrganization
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.Fund">
            <summary>
            Fund
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.Party">
            <summary>
            Party
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.Band">
            <summary>
            Band
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.University">
            <summary>
            University
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.College">
            <summary>
            College
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.MilitaryBranch">
            <summary>
            MilitaryBranch
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.RestOrganization">
            <summary>
            RestOrganization
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemOrganizationType.Transport">
            <summary>
            Transport
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemPersonType">
            <summary>
            Person semantic type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.FirstName">
            <summary>
            FirstName
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.LastName">
            <summary>
            LastName
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.MiddleName">
            <summary>
            MiddleName
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.Profession">
            <summary>
            Profession
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.Nationality">
            <summary>
            Nationality
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.Agent">
            <summary>
            Agent
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.Actor">
            <summary>
            Actor
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.NameParticle">
            <summary>
            Particle of complex name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPersonType.ArabicProper">
            <summary>
            Entity contains name particles or arabic particles
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemPlaceType">
            <summary>
            Plave semantic types
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.City">
            <summary>
            City
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.Country">
            <summary>
            Coutry
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.Continent">
            <summary>
            Continent
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.State">
            <summary>
            State
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.Province">
            <summary>
            Province
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.Hotel">
            <summary>
            Hotel
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.Island">
            <summary>
            Island
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.Oceans">
            <summary>
            Oceans
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlaceType.Prison">
            <summary>
            Prision
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemPlannedEventType">
            <summary>
            Planned event
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlannedEventType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlannedEventType.Sport">
            <summary>
            Sport
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlannedEventType.Action">
            <summary>
            Action
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlannedEventType.Conference">
            <summary>
            Conference
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemPlannedEventType.Forum">
            <summary>
            Forum
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemServiceTypes">
            <summary>
            service semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.AcronymCitation">
            <summary>
            AcronymCitation
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.NominativeDefinition">
            <summary>
            NominativeDefinition
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.Wine">
            <summary>
            Wine
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.MusikalInstrument">
            <summary>
            MusikalInstrument
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.Animal">
            <summary>
            Animal
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.Sport">
            <summary>
            Sport
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.Movie">
            <summary>
            Movie
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.MusicStyle">
            <summary>
            MusicStyle
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.Industry">
            <summary>
            Industry
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.Food">
            <summary>
            Food
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemServiceTypes.TelephoneNumber">
            <summary>
            TelephoneNumber
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemSportEventType">
            <summary>
            Sport event
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemSportEventType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemSportEventType.Tournament">
            <summary>
            Tournament
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemSportEventType.Surd">
            <summary>
            Surd
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemSportEventType.Para">
            <summary>
            Para
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemTimeIntervalType">
            <summary>
            Time semantics
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTimeIntervalType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTimeIntervalType.DateYear">
            <summary>
            Year
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTimeIntervalType.DateMonth">
            <summary>
            Month
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTimeIntervalType.DateDay">
            <summary>
            Day
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTimeIntervalType.DayTime">
            <summary>
            time of day
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTimeIntervalType.Century">
            <summary>
            Century
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTimeIntervalType.DateNumber">
            <summary>
            Number
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemTournamentType">
            <summary>
            Tournament Type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTournamentType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTournamentType.Championship">
            <summary>
            Championship
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTournamentType.Specific">
            <summary>
            Specific
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemTransport">
            <summary>
            Transport semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTransport.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTransport.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTransport.Water">
            <summary>
            Water
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTransport.Railway">
            <summary>
            Railway
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemTransport.Air">
            <summary>
            Air
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemVAcquirePossessType">
            <summary>
            Verb acquire-posess type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVAcquirePossessType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVAcquirePossessType.Acquire">
            <summary>
            Acquire
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVAcquirePossessType.Possess">
            <summary>
            Possess
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemVAcquireType">
            <summary>
            Verb acquare type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVAcquireType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVAcquireType.Receive">
            <summary>
            Receive
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVAcquireType.Hire">
            <summary>
            Hire
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemVBeType">
            <summary>
            Verb be type semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVBeType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVBeType.Represent">
            <summary>
            Represent
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVBeType.Locate">
            <summary>
            Locate
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVBeType.Occur">
            <summary>
            Occur
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVBeType.Exist">
            <summary>
            Exist
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemVEndType">
            <summary>
            Verb end type semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVEndType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVEndType.Eliminate">
            <summary>
            Eliminate
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVEndType.Use">
            <summary>
            Use
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Semantics.SemVerbType">
            <summary>
            vern semantic type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVerbType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVerbType.Be">
            <summary>
            Be
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVerbType.AcquirePossess">
            <summary>
            AcquirePossess
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVerbType.EndBegin">
            <summary>
            EndBegin
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVerbType.End">
            <summary>
            End
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVerbType.Become">
            <summary>
            Become
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVerbType.Weigh">
            <summary>
            Weigh
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVerbType.Last">
            <summary>
            Last
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Semantics.SemVerbType.Cost">
            <summary>
            Cost
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.SyntaxProcessingMode">
            <summary>
            Enumeration of syntax processing modes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SyntaxProcessingMode.AmbuguityEn">
            <summary>
            English Ambiguity group only
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SyntaxProcessingMode.QueryEn">
            <summary>
            English query processing
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SyntaxProcessingMode.IndexationEn">
            <summary>
            English indexation processing
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SyntaxProcessingMode.AmbuguityRu">
            <summary>
            Russian Ambiguity group only
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SyntaxProcessingMode.QueryRu">
            <summary>
            Russian query processing
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SyntaxProcessingMode.IndexationRu">
            <summary>
            Russian indexation processing
            </summary>
        </member>
        <member name="T:Linguistics.Core.Exceptions.AttributeWasntFoundException">
            <summary>
            Represents exception that is thrown when attribute could not be found in element but is expected
            </summary>
        </member>
        <member name="M:Linguistics.Core.Exceptions.AttributeWasntFoundException.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Linguistics.Core.Exceptions.AttributeWasntFoundException.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Constructor with defined object and target attribute name
            </summary>
            <param name="element"></param>
            <param name="attrName"></param>
        </member>
        <member name="T:Linguistics.Core.Extensions.Enumers">
            <summary>
            Contains enumeration extension methods
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.TypeValues">
            <summary>
            TypeValues dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.TypeValuesStrings">
            <summary>
            TypeValue strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.SubSentenceType">
            <summary>
            SubSentenceType dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.TonalityType">
            <summary>
            TonalityType dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.RoleValues">
            <summary>
            Roles dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.EntityType">
            <summary>
            Entity type dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.EntityTypeStrings">
            <summary>
            Entity type string values
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.CaseType">
            <summary>
            Cases dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.EntityRole">
            <summary>
            Roles dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.GenderType">
            <summary>
            Genders dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.NumberType">
            <summary>
            Number types dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.PersonType">
            <summary>
            Person type dict
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.AnimationType">
            <summary>
            AnimationType dict
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.VoiceType">
            <summary>
            VoiceType dict
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.TransitionalType">
            <summary>
            TransitionalType dict
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.TimeType">
            <summary>
            TimeType dict
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.Verbs">
            <summary>
            Verbs dict
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.Nouns">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.NounsStrings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.VerbsString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.TonalityTypeString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.Adjectives">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.AdjectivesStrings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.Adverbs">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.AdverbsStrings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.Collocations">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.CollocationsStrings">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.SemanticType">
            <summary>
            Provides access to type - type mapping
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.TypeToType">
            <summary>
            Provides access to type - type mapping
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.UnitTextTypeStrings">
            <summary>
            UnitTextTypes strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.EntityRoleStrings">
            <summary>
            Entity role string values
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.CaseTypeStrings">
            <summary>
            Case type strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.GenderTypeStrings">
            <summary>
            Gender type strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.NumberTypeStrings">
            <summary>
            Number type strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.AnimationTypeStrings">
            <summary>
            Animation type strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.VoiceTypeStrings">
            <summary>
            voice type strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.PersonTypeStrings">
            <summary>
            Person type strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.TransitionalTypeStrings">
            <summary>
            Transitional type strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.TimeTypeStrings">
            <summary>
            Time type strings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.NerType">
            <summary>
            Ner type dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.Enumers.NerTypeStrings">
            <summary>
            Ner type strings
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.#cctor">
            <summary>
            Initializes all enum dictionaries
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.GetEnumValuesDictionary``1">
            <summary>
            Returns dictionary fullfilled with enum values
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.GetEnumStringValuesDictionary``1">
            <summary>
            Returns dictionary fullfilled with enum values
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.ToEnum``1(System.String)">
            <summary>
            Converts string value into enum
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.TryParseEnum``1(System.String)">
            <summary>
            Tries to parse enum value from string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.ToText(Linguistics.TextMining.Nouns)">
            <summary>
            Convert to text
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.ToText(Linguistics.TextMining.Verbs)">
            <summary>
            Convert to text
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.ToText(Linguistics.TextMining.Adjectives)">
            <summary>
            Convert to text
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.ToText(Linguistics.TextMining.Adverbs)">
            <summary>
            Convert to text
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.ToText(Linguistics.TextMining.Collocations)">
            <summary>
            Convert to text
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Enumers.ToText(Linguistics.Core.Tonality.TonalityType)">
            <summary>
            Convert to text
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Anaphora.IAnaphoraResolver">
            <summary>
            Anaphora resolver interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Anaphora.IAnaphoraResolver.ResolveAnaphoras(System.Xml.Linq.XElement@)">
            <summary>
            Resolve anaphora in rdf xml
            </summary>
            <param name="xmlText"></param>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.ChildContentType">
            <summary>
            Type of the child content
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ChildContentType.DirectSpeech">
            <summary>
            Direct speech content
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ChildContentType.Brackets">
            <summary>
            Brackets content
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ChildContentType.Slogan">
            <summary>
            Slogan content
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.IContentCreator">
            <summary>
            Content creator interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentCreator.CreateContent(System.Text.StringBuilder,Linguistics.Core.Interfaces.Contents.ChildrenContentsSelectionMode)">
            <summary>
            Creates content for input text using defined <paramref name="mode"/>
            </summary>
            <param name="text"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.IContentSentencesIteratorCreator">
            <summary>
            Represents interface for the content's sentences iterator
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentSentencesIteratorCreator.Iterator(Linguistics.Core.Interfaces.Contents.IContent)">
            <summary>
            Returns content's sentences iterator
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Coreference.IAbbreviationPermutationGenerator">
            <summary>
            Interface for abbreviations permutator
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Coreference.IAbbreviationPermutationGenerator.Generate(System.String)">
            <summary>
            generates list of possible abrrevoiations that could be associated with <paramref name="abbreviation"/>
            </summary>
            <param name="abbreviation"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Text.CrfWord">
            <summary>
            Represents CrfWord model
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Text.CrfWord.#ctor(System.String,System.Int32,Linguistics.Core.Enums.Semantics.SemanticType,Linguistics.Core.Enums.Morphology.PartOfSpeechType,Linguistics.Core.Interfaces.CRF.Text.ICrfCharacteristicsCalculator)">
            <summary>
            Creates new word
            </summary>
            <param name="value"></param>
            <param name="start"></param>
            <param name="semantics">dictionary-based word semantic</param>
            <param name="calculator"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Text.CrfWord.AddNormalForm(System.String)">
            <summary>
            Adds new normal form into
            </summary>
            <param name="form"></param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.Characteristics">
            <summary>
            получения коллекции графематических характеристик
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.Text">
            <summary>
            Text that word represents
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.Start">
            <summary>
            Absolute start position of word in text
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.NormalForms">
            <summary>
            Normal form of word
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.Semantics">
            <summary>
            Word's semantic
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.PartOfSpeech">
            <summary>
            Word's part of speech
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.HasCombiSemantic">
            <summary>
            Indicates that word's semantic is semantic of combinatory element
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.ContainsCapitals">
            <summary>
            Indicates that word's first letter is upper letter
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.IsNumeric">
            <summary>
            Indicates that word's text is number
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.InnerWords">
            <summary>
            List of words inside this word
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.HasExactSemantics">
            <summary>
            Indicates that semantic was given according to dictionary resource
            Or that semantic should not be changed by statistics results
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfWord.ShouldChangeSemantics">
            <summary>
            Flag that indicates whenever semantic should be changed
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Text.ICrfCharacteristicsCalculator">
            <summary>
            Crf word characteristics calculator
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Text.ICrfCharacteristicsCalculator.GenerateCharacteristics(System.String,Linguistics.Core.Enums.Semantics.SemanticType,Linguistics.Core.Enums.Morphology.PartOfSpeechType,System.Boolean@,System.Boolean@)">
            <summary>
            Calculates graphematic characteristics
            </summary>
            <param name="text"></param>
            <param name="semantic">dictionary-based text semantic</param>
            <param name="pos">part of speech type</param>
            <param name="isNumeric">flag that indicates that given text is numeric</param>
            <param name="containsCapitals">flag that indicates that givent text contains capital letters</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Text.PosCharacteristics">
            <summary>
            Part of speech characteristics codes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.PosCharacteristics.Undefined">
            <summary>
            Undefined code
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.PosCharacteristics.Official">
            <summary>
            Official code
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.PosCharacteristics.Verb">
            <summary>
            Verb code
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.PosCharacteristics.Noun">
            <summary>
            Noun code
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.PosCharacteristics.Adjective">
            <summary>
            Adjective code
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.PosCharacteristics.Numeric">
            <summary>
            Numeric code
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.PosCharacteristics.Adverb">
            <summary>
            Adverb code
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.PosCharacteristics.Pronoun">
            <summary>
            Pronoun code
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Undefined">
            <summary>
            Undefined semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Time">
            <summary>
            Time semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Place">
            <summary>
            Place semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Measure">
            <summary>
            Measure semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Person">
            <summary>
            Person semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Organization">
            <summary>
            Organization semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Verb">
            <summary>
            Verb semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Service">
            <summary>
            Service semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Info">
            <summary>
            Info semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Material">
            <summary>
            Material semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Building">
            <summary>
            Building semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Transport">
            <summary>
            Transport semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Event">
            <summary>
            Event semantic
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.SemanticCharacteristics.Product">
            <summary>
            Product semantic
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.ICrfSentencesExtractor">
            <summary>
            Crf sentences extractor interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.ICrfSentencesExtractor.Extract(System.Text.StringBuilder,Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings)">
            <summary>
            Processes text and extracts crf sentence from it
            </summary>
            <param name="text"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Text.CrfSentence">
            <summary>
            Represents crf sentence model
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.CrfSentence._words">
            <summary>
            список слов
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Text.CrfSentence.AddWord(Linguistics.Core.Interfaces.CRF.Text.CrfWord)">
            <summary>
            добавление слова
            </summary>
            <param name="word"></param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfSentence.Words">
            <summary>
            получение списка слов
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Training.ICrfSentencesSerializer">
            <summary>
            Crf sentences serializer
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.ICrfSentencesSerializer.DeserializeSentences(System.String)">
            <summary>
            Deserializes string to list of sentences
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.ICrfSentencesSerializer.SerializeSentences(System.Collections.Generic.List{Linguistics.Core.Interfaces.CRF.Text.CrfSentence})">
            <summary>
            Serializes sentence to xelement
            </summary>
            <param name="sentences"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Text.CrfAttribute">
            <summary>
            Аттрибут линейного CRF алгоритма
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Text.CrfAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Конструктор
            </summary>
            <param name="attributeName">Название аттрибута</param>
            <param name="position">Позиция</param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfAttribute.AttributeName">
            <summary>
            название аттрибута
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfAttribute.Position">
            <summary>
            индекс позиции аттрибута
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Text.CrfTemplate">
            <summary>
            Внутреннее представление шаблона для построения входных данных SRFSuitNER
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Text.CrfTemplate.#ctor(System.String[],Linguistics.Core.Interfaces.CRF.Text.Ngram[])">
            <summary>
            Initializes new crf template
            </summary>
            <param name="columnNames"></param>
            <param name="nGramTemplates"></param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfTemplate.ColumnNames">
            <summary>
            Наименования столбцов преобразованного входного файла
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.CrfTemplate.NGramTemplates">
            <summary>
            шаблоны N-грамм
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics">
            <summary>
            Graphematic characteristics Values class
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.NumCapital">
            <summary>
            Начинается с заглавной буквы и содержит хотябы одну цифру [МИГ-21]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.LatCapital">
            <summary>
            Хотя бы одна римская цифра буква (без точки) [XVI] [X-XI]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.OneCapital">
            <summary>
            Одна заглавная буква без точки [F]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.AllCapital">
            <summary>
            Все заглавные буквы (больше одной) [МТС]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.AllLatCapital">
            <summary>
            все буквы заглавные и все на латинице [POP]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.OneCapitalPoint">
            <summary>
            одна заглавная буква с точкой [F.]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.FirstCapitalPoint">
            <summary>
            одна или несколько первых буквы заглавные с точкой + маленькие буквы [В.В.Пупкин]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.AllCapitalPoint">
            <summary>
            все заглавные буквы (больше одной) с точкой (точками) [V.I.P.]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.MixCapitalPoint">
            <summary>
            1. Все заглавные буквы (больше одной) подряд с точкой (точками) [V.IV.I.PA]
            2. Смешенные заглавные и прописные буквы; латиница + кириллица [СевКавГПУ]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.FirstLatCapital">
            <summary>
            Только первая заглавная на латинице [Fox]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.FirstCyrillicCapital">
            <summary>
            Только первая заглавная на кириллице [Вася]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.LowercasePoint">
            <summary>
            Первые строчные с точкой, затем заглавная [ул.Васильевская]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.Quote">
            <summary>
            кавычки ["«“”»]
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.IProd">
            <summary>
            первая буква строчная; в слове нет точек; обязательно присутствует заглавная буква
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.CRF.Text.GraphematicCharacteristics.Other">
            <summary>
            Другой
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.ICrfConverter">
            <summary>
            Converts sentences list into crf-input string
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.ICrfConverter.ToCrfFormat(Linguistics.Core.Interfaces.CRF.Text.CrfSentence)">
            <summary>
            Converts sentences into crf-input string
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.ICrfConverter.Template">
            <summary>
            Inner template that is used for transformation
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.ICrfTextWorker">
            <summary>
            Parses text into intermadiate model of text
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.ICrfTextWorker.CreateWord(System.String,System.Int32,Linguistics.Core.Enums.Semantics.SemanticType,Linguistics.Core.Enums.Morphology.PartOfSpeechType)">
            <summary>
            Creates crf word based on string
            </summary>
            <param name="text"></param>
            <param name="position">Absolute position of word in sentence</param>
            <param name="semantics">found in morpho-sem dictionary word semantics</param>
            <param name="pos">word's part of speech</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.ICrfTextWorker.CreateSentence">
            <summary>
            Creates new sentence 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.INamedEntitiesProcessorCreator">
            <summary>
            Creates named Entities recognizer for srecified model and template
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.INamedEntitiesProcessorCreator.Create(System.String)">
            <summary>
            Create recognizer based on model and template
            </summary>
            <param name="pathToModel"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.INamedEntitiesProcessor">
            <summary>
            Named entities recognizer interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.INamedEntitiesProcessor.SetSentenceWordsSemantic(Linguistics.Core.Interfaces.CRF.Text.CrfSentence)">
            <summary>
            Process <paramref name="sentence"/> sets word's sematics
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.INamedEntitiesRecognizer">
            <summary>
            Managers that operates with recognizers
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.INamedEntitiesRecognizer.SetSentenceWordsSemantic(System.String,Linguistics.Core.Interfaces.CRF.Text.CrfSentence)">
            <summary>
            Process <paramref name="sentence"/> sets word's sematics using models from defined <paramref name="sentenceLanguage"/>
            </summary>
            <param name="sentenceLanguage"></param>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Enums.ResourceModules">
            <summary>
            Names of resource modules
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.ResourceModules.BankRecognition">
            <summary>
            BankRecognition resources
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.ResourceModules.SurfaceSyntax">
            <summary>
            Surface syntax analysis module
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.ResourceModules.PatsearchRu">
            <summary>
            Patsearch resources
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.ResourceModules.PatsearchEn">
            <summary>
            Patsearch resources
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.ResourceModules.SimpleEntities">
            <summary>
            ContentSelectors resources
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.ResourceModules.TextParser">
            <summary>
            TextParser resources
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.ResourceModules.FilteringSemanticNetwork">
            <summary>
            General purpose EntityFiltering module resources
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.ResourceModules.FilteringPatsearch">
            <summary>
            Patsearch EntityFiltering module resources
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.ResourceModules.NounPredRecognition">
            <summary>
            NounPred recognition resources
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Text.Ngram">
            <summary>
            N-грамма
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Text.Ngram.#ctor(Linguistics.Core.Interfaces.CRF.Text.CrfAttribute[])">
            <summary>
            Конструктор N-граммы
            </summary>
            <param name="parts">Составные части N-граммы</param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Text.Ngram.Parts">
            <summary>
            Составные части N-граммы
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Training.ICrfTrainingManager">
            <summary>
            Crf training process manager
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.ICrfTrainingManager.SetSentenceSemantics(Linguistics.Core.Interfaces.CRF.Text.CrfSentence,System.Collections.Generic.List{Linguistics.Core.Interfaces.CRF.Training.NerTextEntity})">
            <summary>
            Sets words semantics in sentence using model's entities
            </summary>
            <param name="sentence"></param>
            <param name="entities"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.ICrfTrainingManager.GetTypes(Linguistics.Core.Interfaces.CRF.Text.CrfSentence)">
            <summary>
            Returns sentence's words types
            </summary>
            <param name="sentence"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.ICrfTrainingManager.GetOrderedEntities(System.Collections.Generic.List{Linguistics.Core.Interfaces.CRF.Training.NerTextEntity})">
            <summary>
            Returns ordered entities collection
            </summary>
            <param name="modelEntities"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.ICrfTrainingManager.ExtractCrfInputData(System.String,System.String,System.String)">
            <summary>
            Writes rf input data to <paramref name="pathToOutputFile"/> using <paramref name="pathToCorpusFile"/> corpus and prepared <paramref name="pathToSentsFile"/> extracted sents
            </summary>
            <param name="pathToCorpusFile"></param>
            <param name="pathToSentsFile"></param>
            <param name="pathToOutputFile"></param>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Training.ICorpusParser">
            <summary>
            Represents training model parser
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.ICorpusParser.Parse(System.String,System.Int32)">
            <summary>
            Parses model string representation into training model
            </summary>
            <param name="input"></param>
            <param name="maxTagLength">Maximum tag length</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Training.NerTextEntity">
            <summary>
            Represent simple entity model for training purposes
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.NerTextEntity.#ctor(System.Int32,System.Int32,Linguistics.Core.Enums.NerType)">
            <summary>
            Creates new entity
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="type"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.NerTextEntity.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Training.NerTextEntity.Start">
            <summary>
            Absolute start index in the text
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Training.NerTextEntity.End">
            <summary>
            Absolute end index in the text
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Training.NerTextEntity.Type">
            <summary>
            Type of the entity
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Training.NerTextEntity.Parent">
            <summary>
            Parent Ner Text entity
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.Training.EntitiesCorpus">
            <summary>
            Represents training model data container
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.EntitiesCorpus.#ctor(System.Collections.Generic.List{Linguistics.Core.Interfaces.CRF.Training.NerTextEntity})">
            <summary>
            Creates new instance
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.EntitiesCorpus.Render">
            <summary>
            Renders model into string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Training.EntitiesCorpus.Entities">
            <summary>
            List of entities in model sorted by position
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.CRF.Training.EntitiesCorpus.ClearedText">
            <summary>
            Cleared text that sould be input for the training
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.EntitiesCorpus.EndPositionComparer.Compare(Linguistics.Core.Interfaces.CRF.Training.NerTextEntity,Linguistics.Core.Interfaces.CRF.Training.NerTextEntity)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.Training.EntitiesCorpus.StartPositionComparer.Compare(Linguistics.Core.Interfaces.CRF.Training.NerTextEntity,Linguistics.Core.Interfaces.CRF.Training.NerTextEntity)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Morphology.EntityMorphology">
            <summary>
            Entity morphology container
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.EntityMorphology.#ctor">
            <summary>
            Creates default MI
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.EntityMorphology.#ctor(Linguistics.Core.Interfaces.Morphology.EntityMorphology)">
            <summary>
            Copies values from another morphology container
            </summary>
            <param name="morphology"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.EntityMorphology.Equals(Linguistics.Core.Interfaces.Morphology.EntityMorphology)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.EntityMorphology.Case">
            <summary>
                Падеж
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.EntityMorphology.Gender">
            <summary>
                Род
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.EntityMorphology.Number">
            <summary>
                Число
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.EntityMorphology.Animacy">
            <summary>
                Одушевленность
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.EntityMorphology.Transitivity">
            <summary>
                Переходность
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.EntityMorphology.Person">
            <summary>
                Лицо
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.EntityMorphology.Voice">
            <summary>
                Залог
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.EntityMorphology.Tense">
            <summary>
            Verb time
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Morphology.IMorphologyAnalyzerProvider">
            <summary>
            Provides access to morphology analyzer
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.IMorphologyAnalyzerProvider.GetAnalyzer">
            <summary>
            Returns analyzer
            </summary>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Recognition.ISimpleEntitiesSelectorCreator">
            <summary>
            Simple entity selector factory
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Recognition.ISimpleEntitiesSelectorCreator.Create(Linguistics.Core.Enums.ResourceModules)">
            <summary>
            Create new selector based on expressions from resources
            </summary>
            <param name="expressionsModule"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Syntax.ISyntaxNode">
            <summary>
            Syntax node abstraction
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxNode.Children">
            <summary>
            Children list
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxNode.Word">
            <summary>
            Word that node represents
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgent">
            <summary>
            Agent that uses syntax core to process text and output debug information
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgent.InitTree(System.String)">
            <summary>
            Initializes agent with <paramref name="inputText"/>
            use this method when stepped processing should be initiated
            </summary>
            <param name="inputText"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgent.SetTextForFullParsing(System.String)">
            <summary>
            Initializes agent with <paramref name="inputText"/>
            Use this whent text should be processed in one step
            </summary>
            <param name="inputText"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgent.RunAll">
            <summary>
            Performs all availvable constructions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgent.RunGroup(System.Boolean,System.Int32)">
            <summary>
            Runs all constructions remaining in group
            </summary>
            <param name="useSingleHypothesis"></param>
            <param name="hypothesisNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgent.RunToConstruction(System.String,System.Boolean,System.Int32)">
            <summary>
            Runs to specific construction with name <paramref name="constructionName"/>
            </summary>
            <param name="constructionName"></param>
            <param name="useSingleHypothesis"></param>
            <param name="hypothesisNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgent.RunStep(System.Boolean,System.Int32)">
            <summary>
            Performs one step processing
            </summary>
            <param name="useSingleHypothesis"></param>
            <param name="hypothesisNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgent.RunVersion">
            <summary>
            Switches versions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgent.GetConstructionsNames">
            <summary>
            Returns list of available constructions names
            </summary>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgentCreator">
            <summary>
            Syntax agent factory interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Syntax.ISyntaxProcessorAgentCreator.Create(Linguistics.Core.Enums.SyntaxProcessingMode,Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings)">
            <summary>
            Creates new agent instance 
            </summary>
            <param name="syntaxProcessingType"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Syntax.ISyntaxStepResult">
            <summary>
            Container that includes one syntax step processing result
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxStepResult.Trees">
            <summary>
            Syntax root nodes
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxStepResult.Morphology">
            <summary>
            List of morphology
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxStepResult.Semantics">
            <summary>
            List of semantics
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxStepResult.SyntaxInformation">
            <summary>
            List of syntax information
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxStepResult.CurrentExpert">
            <summary>
            Name of current expert(construction)
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxStepResult.IsVersioned">
            <summary>
            Indicates that construction has ambiguity in processing
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxStepResult.VersionNumber">
            <summary>
            Number of ambiguious version
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.ISyntaxStepResult.IsTheLastConstruction">
            <summary>
            Indicates that processed construction was last
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Morphology.IWordMorphoInformation">
            <summary>
            Word's morpho information container
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.IWordMorphoInformation.Word">
            <summary>
            Container's word string
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.IWordMorphoInformation.MorphoFeature">
            <summary>
            Morpho feature
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Semantics.IWordSemanticInformation">
            <summary>
            Word's semantic information container
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.IWordSemanticInformation.Word">
            <summary>
            Container's word string
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.IWordSemanticInformation.SemanticFeature">
            <summary>
            Semantic feature
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Syntax.IWordSyntaxInformation">
            <summary>
            Word's syntax information container
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.IWordSyntaxInformation.Word">
            <summary>
            Container's word string
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.IWordSyntaxInformation.Category">
            <summary>
            Syntax category of container
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.IWordSyntaxInformation.CategoryPower">
            <summary>
            Syntax category power
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Syntax.IWordSyntaxInformation.DependencyPower">
            <summary>
            Syntax dependency power
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.IContent">
            <summary>
            Content interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetParagraphs">
            <summary>
            Returns content's inner paragraphs
            </summary>
            <returns>параграфы</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetInnerBuilder">
            <summary>
            Returns inner builder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetNormalText">
            <summary>
                Получение нормализованного текстового значения
            </summary>
            <returns>нормализованный текст</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.AppendNormalText(System.String)">
            <summary>
            Добавление нормализованного текста в конец
            </summary>
            <param name="normalText">нормализованный текст</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.ClearNormalText">
            <summary>
            Очистка нормализованного текста
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetFullLength">
            <summary>
            Получение полной длины контента (с учетом дочерних контентов)
            </summary>
            <returns>полная длина контента</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetTextWithChildrenParts(System.Boolean)">
            <summary>
            Получение текста с потенциальными частями
            </summary>
            <param name="isOnlyPotencial">флаг, что нужно выбирать только потенциальные части</param>
            <returns>текст с потенциальными частями</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetFullContentsLength(System.Int32,System.Boolean)">
            <summary>
            Получение суммарной длины контентов для заданного последнего контента
            </summary>
            <param name="lastContentIndex">индекс последнего контента</param>
            <param name="isOnlyNotPotencial">флаг, что нужно обрабатывать только не потенциальные части</param>
            <returns>суммарная длина контентов</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetContentCorrectedStart(System.Int32)">
            <summary>
                Получение скорректированного начала контента
                дочерний контент был вырезан из исходного текста
                для вырезанного контента была сохранена правильная позиция, а для предложения - нет
            </summary>
            <param name="contentIndex">индекс контента</param>
            <returns>скорректированное начало контента</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetCurrentSentece(System.Int32,System.Int32)">
            <summary>
            Получение текущего предложения
            </summary>
            <param name="paragraphIndex">индекс текущего параграфа</param>
            <param name="sentenceIndex">индекс текущего предложения в параграфе</param>
            <returns>текущее предложение</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetNextSentence(System.Int32@,System.Int32@)">
            <summary>
            Получение следующего предложения
            </summary>
            <param name="paragraphIndex">индекс текущего параграфа</param>
            <param name="sentenceIndex">индекс текущего предложения в параграфе</param>
            <returns>следующее предложение</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetAbsolutePosition(System.Int32)">
            <summary>
            Returns absolute position for position in context
            </summary>
            <param name="localPosition">position in context</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.ClearEntities">
            <summary>
            Очистка коллекции сущностей
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetContentIndexesInsideSentence(Linguistics.Core.Interfaces.TextParsing.ITextSentence,System.Int32@,System.Int32)">
            <summary>
            Получение списка индексов контентов начиная с текущего, которые лежат в заданном предложении
            </summary>
            <param name="textSentence">текстовое предложение</param>
            <param name="currentContentIndex">индекс текущего контента</param>
            <param name="sentenceShift">сдвиг предложения</param>
            <returns>список индексов контентов в заданном предложении</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContent.GetSentencesWithChildrenParts(System.Boolean)">
            <summary>
                Получение предложений с дочерними частями
            </summary>
            <param name="isOnlyPotencial">флаг, что нужно выбирать только потенциальные части</param>
            <returns>предложения с дочерними частями</returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IContent.AbsoluteStartPosition">
            <summary>
            Absolute content start position in text
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IContent.TextStartPosition">
            <summary>
            Начало текста относительно родительского контента
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IContent.Length">
            <summary>
            Content Length
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IContent.NormalizeText">
            <summary>
            Флаг нормализации текста
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IContent.Children">
            <summary>
                Список дочерних контентов
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IContent.IsPotencialParentPart">
            <summary>
            Проверка, что данный контент может быть частью родительского
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Filtering.IGarbageTextRecognizer">
            <summary>
            Garbage text recognizer interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Filtering.IGarbageTextRecognizer.MarkGarbagedSentences(System.Collections.Generic.IEnumerable{Linguistics.Core.Interfaces.TextParsing.ITextSentence})">
            <summary>
            Iterates through all sentences and mark tehem as unprocessable if sentence's text is garbaged
            </summary>
            <param name="sentences"></param>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.OutputResultBase">
            <summary>
            Base class for textmining processing result
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.OutputResultBase.#ctor(System.String[],System.String[])">
            <summary>
            Creates new instance of processing result
            </summary>
            <param name="operateRulesNames">Names of rules that were applied</param>
            <param name="logRecords">Processing log records</param>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.OutputResultBase.ProcessingSteps">
            <summary>
            Collection of processing steps description
            key - name of the processing step
            value - description of processing state
            <remarks>For internal purposes only!</remarks>
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.OutputResultBase.OperateRulesNames">
            <summary>
            Names of rules that were applied
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.OutputResultBase.LogRecords">
            <summary>
            Processing log records
            </summary>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.OutputResultTupleBase`1">
            <summary>
            Base class for tuple-formed result
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.OutputResultTupleBase`1.#ctor(`0[],System.String[],System.String[])">
            <summary>
            Creates new instance of tuple-formed result
            </summary>
            <param name="tuples">inner tuples</param>
            <param name="operateRulesNames">Names of rules that were applied</param>
            <param name="logRecords">Processing log records</param>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.OutputResultTupleBase`1.Tuples">
            <summary>
            Inner tuples
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.OutputResultTupleBase`1.OutputXml">
            <summary>
            Tuples as xml
            </summary>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.SentenceText">
            <summary>
            Sentence text representation
            </summary>
        </member>
        <member name="F:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.SentenceText.TextXml">
            <summary>
            Text xml constant string
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.SentenceText.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Creates new sentence text
            </summary>
            <param name="sent"></param>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.SentenceText.GetSent(System.Xml.Linq.XDocument)">
            <summary>
            Returns sentence xml
            </summary>
            <param name="xdocument"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.SentenceText.ToXDocument(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Converts sentences to xml
            </summary>
            <param name="sents"></param>
            <returns></returns>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.SentenceText.XDocument">
            <summary>
            inner xdocument
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.CommonContracts.SentenceText.Sent">
            <summary>
            Sentence xml representation
            </summary>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams">
            <summary>
            Sentiment analysis parameters
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams.#ctor">
            <summary>
            Instantiates class with default parameters
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams.#ctor(Linguistics.TextMining.ObjectAllocateMethod)">
            <summary>
            Creates parameters for specific type of allocation
            </summary>
            <param name="objectAllocateMethod"></param>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams.ObjectAllocateMethod">
            <summary>
            Inquiry object allocation method
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams.SourceType">
            <summary>
            Type of document source
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams.RecordRules">
            <summary>
            Indicates that rules should be recorded during processing
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams.InquiriesSynonyms">
            <summary>
            Inquiry object synonyms
            </summary>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.Digest.DigestOutputResult">
            <summary>
            Result of digest processing
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.Digest.DigestOutputResult.#ctor(Linguistics.ServiceInterfaces.DataContracts.Digest.DigestTuple[],System.String[],System.String[])">
            <summary>
            Creates new instance of result
            </summary>
            <param name="tuples">processing tuples</param>
            <param name="operateRulesNames">enumeration with used rules names</param>
            <param name="logRecords">enumeration with log records</param>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.Digest.DigestTuple">
            <summary>
            Represents digest tuple
            </summary>
        </member>
        <member name="T:Linguistics.Core.OpinionMining.OpinionMiningTuple">
            <summary>
            </summary>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.#ctor(Linguistics.Core.OpinionMining.SubjectEssence,System.Xml.Linq.XElement,System.Int32,Linguistics.Core.OpinionMining.FilterBySynonyms)">
            <summary>
            Creates new tuple
            </summary>
            <param name="subject"></param>
            <param name="xSentence"></param>
            <param name="sentenceNumber"></param>
            <param name="filterBySynonyms"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.#ctor(Linguistics.Core.OpinionMining.SubjectEssence,Linguistics.Core.OpinionMining.ObjectEssence,System.Xml.Linq.XElement,System.Int32,Linguistics.Core.OpinionMining.FilterBySynonyms,Linguistics.TextMining.ObjectAllocateMethod)">
            <summary>
            Creates new tuple
            </summary>
            <param name="subject"></param>
            <param name="object"></param>
            <param name="sentence"></param>
            <param name="sentenceNumber"></param>
            <param name="filterBySynonyms"></param>
            <param name="method"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.#ctor(Linguistics.Core.OpinionMining.OpinionMiningTuple,System.String)">
            <summary>
            Creates new tuple
            </summary>
            <param name="other4Copy"></param>
            <param name="sentenceXml"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.#ctor(Linguistics.Core.OpinionMining.OpinionMiningTuple,Linguistics.Core.OpinionMining.ObjectEssence,Linguistics.Core.OpinionMining.SubjectEssence)">
            <summary>
            Creates new tuple
            </summary>
            <param name="copyProvider"></param>
            <param name="object"></param>
            <param name="subject"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.GetSentence">
            <summary>
            Returns sentence's xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.GetCleanedSentenceText">
            <summary>
            Returns cleaned sentence's xml
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.Create4AuthorSubject(Linguistics.Core.Interfaces.Workers.IServiceFunctions,System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Int32,Linguistics.Core.OpinionMining.FilterBySynonyms,Linguistics.TextMining.ObjectAllocateMethod)">
            <summary>
            Create new tuple
            </summary>
            <param name="serviceFunctions"></param>
            <param name="object"></param>
            <param name="sentence"></param>
            <param name="sentenceNumber"></param>
            <param name="filterBySynonyms"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.Create4AuthorSubject(Linguistics.Core.Interfaces.Workers.IServiceFunctions,Linguistics.Core.OpinionMining.ObjectEssence,System.Xml.Linq.XElement,System.Int32,Linguistics.Core.OpinionMining.FilterBySynonyms,Linguistics.TextMining.ObjectAllocateMethod)">
            <summary>
            Create new tuple
            </summary>
            <param name="serviceFunctions"></param>
            <param name="object"></param>
            <param name="sentence"></param>
            <param name="sentenceNumber"></param>
            <param name="filterBySynonyms"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.OpinionMiningTuple.RemoveOtherSubjectAttributes(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Boolean})">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.OpinionMiningTuple.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.OpinionMiningTuple.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.OpinionMiningTuple.SentenceText">
            <summary>
            Sentence
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.OpinionMiningTuple.SentenceNumber">
            <summary>
            Sentence number
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.OpinionMiningTuple.FilterBySynonyms">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.OpinionMiningTuple.HasObject">
            <summary>
            indicates that tuple has object
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.Digest.DigestTuple.#ctor(Linguistics.Core.OpinionMining.OpinionMiningTuple,System.String)">
            <summary>
            Creates new digest tuple
            </summary>
            <param name="other4Copy"></param>
            <param name="sentenceXml"></param>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.Digest.DigestTuple.#ctor(Linguistics.Core.OpinionMining.OpinionMiningTuple,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates new digest tuple based on om tuple
            </summary>
            <param name="other4Copy"></param>
            <param name="sentenceXml"></param>
            <param name="positive"></param>
            <param name="negative"></param>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.Digest.DigestTuple.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.Digest.DigestTuple.Positive">
            <summary>
            Positive sentiment
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.Digest.DigestTuple.Negative">
            <summary>
            Negative sentiment
            </summary>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.OpinionMining.OpinionMiningOutputResult">
            <summary>
            OM processing result
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.OpinionMining.OpinionMiningOutputResult.#ctor(Linguistics.Core.OpinionMining.OpinionMiningTuple[],System.String[],System.String[])">
            <summary>
            Creates new OM result
            </summary>
            <param name="tuples"></param>
            <param name="operateRulesNames"></param>
            <param name="logRecords"></param>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject">
            <summary>
            Sentiment object representation
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.#ctor(System.Xml.Linq.XElement,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates new sentiment object instance
            </summary>
            <param name="element"></param>
            <param name="name"></param>
            <param name="positive"></param>
            <param name="negative"></param>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.#ctor(System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates new sentiment object instance
            </summary>
            <param name="homogeneousParentElement"></param>
            <param name="element"></param>
            <param name="name"></param>
            <param name="positive"></param>
            <param name="negative"></param>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.GetHomogeneousElementOrElement">
            <summary>
            Returns homogeneous or simple object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.Name">
            <summary>
            Value of object
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.ElementXml">
            <summary>
            Inner element xml
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.HomogeneousElementXml">
            <summary>
            Inner homogeneous element xml
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.Positive">
            <summary>
            Positive sentiment value
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.Negative">
            <summary>
            Negative sentiment value
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.IsPositive">
            <summary>
            Indicates that object has positive sentiment
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.IsNegative">
            <summary>
            Indicates that object has negative sentiment
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.Element">
            <summary>
            Xml of object element
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject.HomogeneousElement">
            <summary>
            Xml of inner homogeneous element
            </summary>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.Standalone.TonalityMarkingOutputResult">
            <summary>
            Sentiment analysis result representation
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.Standalone.TonalityMarkingOutputResult.#ctor(System.Xml.Linq.XElement,Linguistics.Core.Tonality.InquiryAllocateStatus,System.Nullable{System.Double},System.Nullable{System.Double},System.Collections.Generic.List{Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject},System.String[],System.String[])">
            <summary>
            Creates new sentiment analysis result object
            </summary>
            <param name="resultXml"></param>
            <param name="inquiryAllocateStatus"></param>
            <param name="positive"></param>
            <param name="negative"></param>
            <param name="objects"></param>
            <param name="operateRulesNames"></param>
            <param name="logRecords"></param>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.Standalone.TonalityMarkingOutputResult.GetOutputXDocument">
            <summary>
            Returns out xml
            </summary>
            <returns></returns>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.Standalone.TonalityMarkingOutputResult.OutputXml">
            <summary>
            Output xml
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.Standalone.TonalityMarkingOutputResult.OutputXmlIsEmpty">
            <summary>
            Indicates that out xml is empty
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.Standalone.TonalityMarkingOutputResult.InquiryAllocateStatus">
            <summary>
            Status of allocation
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.Standalone.TonalityMarkingOutputResult.TonalityMarkingTuples">
            <summary>
            Found sentiment tuples
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.Standalone.TonalityMarkingOutputResult.AuthorTonalityMarkingTuple">
            <summary>
            Authir sentiment tuple
            </summary>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingTuple">
            <summary>
            Sentiment analysis tuple
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingTuple.#ctor(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Collections.Generic.IList{Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject})">
            <summary>
            Creates new tuple with defined object and sentiment
            </summary>
            <param name="subject"></param>
            <param name="positive"></param>
            <param name="negative"></param>
            <param name="objects"></param>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingTuple.CreateSubjectAuthor(System.Nullable{System.Double},System.Nullable{System.Double},System.Collections.Generic.List{Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingObject})">
            <summary>
            Creates new tuple with author as subject
            </summary>
            <param name="positive"></param>
            <param name="negative"></param>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingTuple.Subject">
            <summary>
            Subject value
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingTuple.Positive">
            <summary>
            Positive sentiment
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingTuple.Negative">
            <summary>
            Negative sentiment
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityMarkingTuple.Objects">
            <summary>
            Collection of objects
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextMining.IDigestAnalyzer">
            <summary>
            Digest service interface
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextMining.ISentimentAnalyzer">
            <summary>
            Interface for standalone tonality marking service
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextMining.ISentimentAnalyzer.AnalyzeSentiment(System.Xml.Linq.XElement,Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams,System.Boolean)">
            <summary>
            </summary>
            <param name="rdf"></param>
            <param name="settings"></param>
            <param name="preProcessRdf"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.IOpinionAnalyzer">
            <summary>
            Opinion mining service interface
            </summary>
        </member>
        <member name="M:Linguistics.ServiceInterfaces.IOpinionAnalyzer.AnalyzeOpinion(System.Xml.Linq.XElement,Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams)">
            <summary>
            Executes opiniion mining processing over input params information
            </summary>
            <param name="rdf"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextMining.IDigestAnalyzer.AnalyzeDigest(System.Xml.Linq.XElement,Linguistics.ServiceInterfaces.DataContracts.TonalityMarking.TonalityParams)">
            <summary>
            Executes digest processing
            </summary>
            <param name="rdf"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextMining.IRdfPreprocessor">
            <summary>
            Represents rdf preprocessor
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextMining.IRdfPreprocessor.PreprocessRdf(System.Xml.Linq.XElement)">
            <summary>
            Preprocess rdf
            </summary>
            <param name="xdoc"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextParsing.ISentencesIterator">
            <summary>
            Sentences iterator interface
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextParsing.ISentencesIterator.Sentences">
            <summary>
            Inner sentences
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextParsing.ISentenceSelector">
            <summary>
            Represents sentences selector interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextParsing.ISentenceSelector.Select(System.String,System.Boolean)">
            <summary>
            Выделение предложений из текста параграфа
            </summary>
            <param name="paragraph">текст параграфа</param>
            <param name="isBlogText">флаг, что парсится блоговский текст</param>
            <returns>список предложений</returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextParsing.ITextPartsCreator">
            <summary>
            Factory for text elements
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextParsing.ITextPartsCreator.CreateParagraph(System.Collections.Generic.IEnumerable{Linguistics.Core.Interfaces.TextParsing.ITextSentence},System.Int32)">
            <summary>
            Creates new paragraphs based on 
            </summary>
            <param name="innerSentences"></param>
            <param name="startPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextParsing.ITextPartsCreator.CreateSentence(System.String,System.Int32)">
            <summary>
            Creates new text sentence with defined start position
            </summary>
            <param name="sentenceText"></param>
            <param name="startPosition"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextParsing.ITextPartsWorker">
            <summary>
            Represents worker that can operate with textParts
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextParsing.ITextPartsWorker.GetPartsText(System.Collections.Generic.IEnumerable{Linguistics.Core.Interfaces.TextParsing.ITextPart})">
            <summary>
            Return full text after parts join
            </summary>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextPreprocessing.ITextPreprocessor">
            <summary>
            Interface that represents text preprocessor interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextPreprocessing.ITextPreprocessor.Process(System.Text.StringBuilder)">
            <summary>
            Process <paramref name="builder"/> and changes inner text
            </summary>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.SemNet.ISemanticNetworkProcessor">
            <summary>
            Processes text xml and creates semantic network
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.SemNet.ISemanticNetworkProcessor.GetSemanticNetwork(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Builds semantic network for the <paramref name="rdf"/>
            </summary>
            <param name="rdf">input rdf</param>
            <param name="generateAllSubthemes">flag indicates whenever subthemes should be presented in semantic netwok</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.ICrfSentencesSelectorProvider">
            <summary>
            Provider interface for the <see cref="T:Linguistics.Core.Interfaces.CRF.CrfSentencesSelector"/>
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.CRF.ICrfSentencesSelectorProvider.GetSelector">
            <summary>
            returns crf sentences selector delegate implementation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.CRF.CrfSentencesSelector">
            <summary>
            Crf sentence selector
            </summary>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.EntitiesSelector">
            <summary>
            Entities selector delegate
            </summary>
            <param name="content"></param>
            <param name="baseDate"></param>
            <param name="settings"></param>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.LexicalEntitiesSelector">
            <summary>
            Text entities selector
            Describes delegate that is supposed to represent selected entities in text representation
            </summary>
            <param name="content"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.IContentEntitiesSelector">
            <summary>
            Represents entities selector interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.IContentEntitiesSelector.SelectEntitiesAndSaveResultInContent(Linguistics.Core.Interfaces.Contents.IContent,System.String,Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings)">
            <summary>
            Selects entities and saves result in content
            </summary>
            <param name="content"></param>
            <param name="dateString"></param>
            <param name="settings"></param>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.IContentEntitiesSelectorCreator">
            <summary>
            Describes abstraction that can create selectors based on delegates
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.IContentEntitiesSelectorCreator.Create(Linguistics.Core.Interfaces.TextProcessing.EntitiesSelector)">
            <summary>
            Creates new selector based on interface
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.ITextNormalizer">
            <summary>
            Provides methods to normalize phrases and words
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.ITextNormalizer.GetAllWordFormsWithPartsOfSpeech(System.String)">
            <summary>
            Returns list of all word's morphoforms and it's parts of speech
            </summary>
            <param name="word">input word</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.ITextNormalizer.GetNormalWordForm(System.String)">
            <summary>
            Returns word's normal form
            </summary>
            <param name="word">input word</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.ITextNormalizer.GetAllNormalWordForm(System.String)">
            <summary>
            Returns all word's normal forms
            </summary>
            <param name="word">input word</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.ITextNormalizer.GetAllPhraseForms(System.String)">
            <summary>
            Returns all phrase's morphoforms
            </summary>
            <param name="phrase">input phrase</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.ITextPipelineProcessor">
            <summary>
            Text pipeline processor interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.ITextPipelineProcessor.RunProcessing(Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest)">
            <summary>
            Executes full processing based on <paramref name="request"/>
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.ITextPipelineProcessorsManager">
            <summary>
            Manager that privides access to pipeline processors
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.ITextPipelineProcessorsManager.GetProcessor(Linguistics.Core.SourceType,Linguistics.Core.SelectEntitiesMode)">
            <summary>
            Returns processor for the defined <paramref name="source"/> and <paramref name="mode"/>
            </summary>
            <param name="source"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingContext">
            <summary>
            processing context interface
            contains information specific to concrete processing
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingController">
            <summary>
            Provides methods to proces text using linguistics core
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingController.ProcessText(Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest)">
            <summary>
            Processes text and returns complete information about processing
            </summary>
            <param name="processingRequest">request with all neccessary data to process text</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Morphology.IWordMorphoFormsProvider">
            <summary>
            Provides methods to get morpho forms of the word
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.IWordMorphoFormsProvider.GetAllWordForms(System.String,Linguistics.Core.Enums.Morphology.PartOfSpeechType)">
            <summary>
            Returns all word's morphoforms
            </summary>
            <param name="word">input word</param>
            <param name="type">part of speech for which information should be found</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings">
            <summary>
            text processing settings interface
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.CoreferenceAbbreviations">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.CoreferencePersonsGlobal">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.CoreferencePersonsLocal">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.FiltrationEntitiesValue">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.SyntaxSufraceAnalysis">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.RecognitionNounPreds">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.RecognitionBanks">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.RecognitionPetrochemicals">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.RecognitionLaws">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.NormalizationSecondary">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsEntityTreeCorrectionSecondary">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsDeletePlaceFromOrg">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsConvertBadDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsDeleteBadDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsPersonNameAndRomanNumberUnion">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsPersonInfoInsidePersonName">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsHyphenDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsFindNextDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsFromToDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsRegionDelim">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsChangeDateToPlace">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsPersonUnitRus">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsPostHomogeneousGenetive">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsHomogeneous">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsHomogeneousAdj">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsDeleteNounifAdj">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsCDelimeterRus">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsOrgNoInfoPersonUnion">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsOrgGeoAbbrUnion">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsPersonOrgOrPlaceUnion">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsSkobkiDelete">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsDeletePersonFromOrg">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsDelBadProper">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsDelBadOrg">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsEntityTreeCorrectionInitial">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.HeuristicsDeleteShortWordForm">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.NormalizationInitial">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.SyntaxInitialAnalysis">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.NerCrf">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.NerDictionary">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.NerNormalForms">
            <summary>
            Indicates whenever normal forms should be analyzed within unit
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.NerDictionarySemantics">
            <summary>
            Indicates whenever dictionary semantics should be used in tagging phase
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.LexicalAnalysis">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.RecognitionSimpleEntities">
            <summary>
            Indicates whenever simple entities recognition should be used
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.Preprocessing">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.ShowStagesTraceInformation">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.ShowStagesTimeStamps">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.ProcessingBuiltInOpinionCore">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.ProcessingBuiltInSentimentCore">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.ProcessingBuiltInLinguisticsCore">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.ITextProcessingSettings.ProcessingReturnRdf">
            <summary>
            Flag that indicates whenever rdf should be return when processing is finished
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase">
            <summary>
            Contains entity information
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Serialization.ISerializableToRDF">
            <summary>
                Интерфейс сериализации RDF
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Serialization.ISerializableToRDF.ToXElement">
            <summary>
                Создание для объекта XML-элемента
            </summary>
            <returns>XML-элемент</returns>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.UnitType">
            <summary>
                Имя тега
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.#ctor(Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer,Linguistics.Core.Enums.UnitTextType)">
            <summary>
            Creates new instance of container with defined type
            </summary>
            <param name="type"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.ParseMorphoInfo(System.String)">
            <summary>
                Преобразует заданное строковое представление в его эквивалент MorphoInformation
            </summary>
            <param name="morpho">строковое представление морфологической информации</param>
            <returns>бъект, эквивалентный строковому представлению</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.MorphoInfoToString(Linguistics.Core.Interfaces.Morphology.MorphoInformation)">
            <summary>
                Преобразует заданный объект MorphoInformation в его строковый эквивалент
            </summary>
            <param name="morpho">объект MorphoInformation</param>
            <returns>строковый эквивалент</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.ToXElement">
            <summary>
            Serializes information into xml element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.UpdateDetailsOnChildrenAddition(Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase)">
            <summary>
            Updates entity info according to new child's information
            </summary>
            <param name="childEntityInfo"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.UpdateDetailsOnChildrenDeletion(Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase)">
            <summary>
            Updates entity info according to new child's information
            </summary>
            <param name="childEntityInfo"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.AddMorphoInfoAttribute(System.Xml.Linq.XElement)">
            <summary>
             Adds MI attribute into XElement
            </summary>
            <param name="element">элемент</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.GetMorphoString">
            <summary>
                Получение строкового представления морфологической информации
            </summary>
            <returns>строковое представление морфологической информации</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.Equals(Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.CompareContents(Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase)">
            <summary>
            Method that compares two containers content
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.op_Equality(Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase,Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase)">
            <summary>
            Compares two containers
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.op_Inequality(Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase,Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase)">
            <summary>
            Compares two containers
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.Type">
            <summary>
                Тип сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.Value">
            <summary>
                Нормализованное значение
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.ValueCore">
            <summary>
            Core of entity's value
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase.Morpho">
            <summary>
                Морфологическая информация
            <remarks>не может быть пустой массив</remarks>
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer">
            <summary>
            Contains entity type information
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer.GetFullType">
            <summary>
            Returns type string value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer.Equals(Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer.op_Equality(Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer,Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer)">
            <summary>
            Compares two containers
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer.op_Inequality(Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer,Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer)">
            <summary>
            Compares two containers
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer.EntityType">
            <summary>
            Concrete entity type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.EntityTypeContainer.CustomType">
            <summary>
            Type of custom entity (EntityType is null)
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.Entity.Info.AdjectivePair">
            <summary>
            Structure that represents adjective pair
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Text.Entity.Info.AdjectivePair.EmptyArray">
            <summary>
            Empty array of adjective pairs
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.AdjectivePair.#ctor(System.String,System.String)">
            <summary>
            Creates new pair
            </summary>
            <param name="initialForm"></param>
            <param name="normalizedForm"></param>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Text.Entity.Info.AdjectivePair.InitialForm">
            <summary>
            Initial form of adjective
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Text.Entity.Info.AdjectivePair.NormalizedForm">
            <summary>
            Normalized form of adjective that is used in value
            </summary>
        </member>
        <member name="T:Linguistics.Core.EntityInfoBase">
            <summary>
                Информация о лингвистической сущности
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.Entity.Info.CommonInfo">
            <summary>
                Информация о стандартной сущности
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.CommonInfo.#ctor(Linguistics.Core.Enums.EntityType,Linguistics.Core.Enums.UnitTextType)">
            <summary>
            Creates standard linguistics entity
            </summary>
            <param name="type"></param>
            <param name="unitType"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.CommonInfo.ParseMorphoInfo(System.String)">
            <summary>
                Преобразует заданное строковое представление в его эквивалент MorphoInformation
            </summary>
            <param name="morpho">строковое представление морфологической информации</param>
            <returns>бъект, эквивалентный строковому представлению</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.CommonInfo.ParseAndStoreMorphoFeatures(System.String,Linguistics.Core.Interfaces.Morphology.MorphoInformation)">
            <summary>
            Parses morpho features from string and stores them into <paramref name="result"/>
            </summary>
            <param name="morpho">string with morpho codes</param>
            <param name="result">result container</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.CommonInfo.MorphoInfoToString(Linguistics.Core.Interfaces.Morphology.MorphoInformation)">
            <summary>
                Преобразует заданный объект MorphoInformation в его строковый эквивалент
            </summary>
            <param name="morpho">объект MorphoInformation</param>
            <returns>строковый эквивалент</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.CommonInfo.SerializeMorphoCharacteristics(Linguistics.Core.Interfaces.Morphology.MorphoInformation,System.Text.StringBuilder)">
            <summary>
            Appends morpho features codes into <paramref name="result"/>
            </summary>
            <param name="morpho">container with information</param>
            <param name="result">result container</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.CommonInfo.ToXElement">
            <summary>
            Serializes information into xml element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.EntityInfoBase.#ctor(Linguistics.Core.Enums.EntityType)">
            <summary>
            Creates new instance
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Linguistics.Core.InfoWithMorpho">
            <summary>
            Represents entity info that contains morpho features
            </summary>
        </member>
        <member name="M:Linguistics.Core.InfoWithMorpho.#ctor(Linguistics.Core.Enums.EntityType)">
            <summary>
            Creates new instance
            </summary>
            <param name="type">entity type</param>
        </member>
        <member name="M:Linguistics.Core.InfoWithMorpho.ToXElement">
            <summary>
            Serializes information into xml element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.InfoWithMorpho.AddEntityAttributes(System.Xml.Linq.XElement)">
            <summary>
            Appends custom attributes to result
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase">
            <summary>
                Информация об именованной сущности
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase._adjectives">
            <summary>
                Прилагательные, которые могут быть отфильтрованы
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.#ctor(Linguistics.Core.Enums.EntityType,Linguistics.Core.Interfaces.Text.Entity.Info.AdjectivePair[])">
            <summary>
            Creates new instance of entity
            </summary>
            <param name="type"></param>
            <param name="adjectives"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.CompareContents(Linguistics.Core.Interfaces.Text.Entity.Info.UnitInfoBase)">
            <summary>
            Method that compares two containers content
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.AddEntityAttributes(System.Xml.Linq.XElement)">
            <summary>
            Appends custom attributes to result
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.AddMainNounAttribute(System.Xml.Linq.XElement)">
            <summary>
                Добавление к заданному элементу главного существительного цепочки, если это необходимо
            </summary>
            <param name="element">элемент</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.AddPrefixAttribute(System.Xml.Linq.XElement)">
            <summary>
                Добавление к заданному элементу префикса, если он не пуст
            </summary>
            <param name="element">элемент</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.AddAdjectivesAttribute(System.Xml.Linq.XElement)">
            <summary>
                Добавление к заданному элементу всех прилагательных цепочки, если они есть
            </summary>
            <param name="element">элемент</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.AddAttributeIfValueIsNotEmpty(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
                Добавление к заданному элементу заданного атрибута, если его значение не пусто
            </summary>
            <param name="element">элемент</param>
            <param name="attributeName">имя атрибута</param>
            <param name="attributeValue">значение атрибута</param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.MainNoun">
            <summary>
                Главное существительное сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.Prefix">
            <summary>
                Префикс сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.IsPseudoPlace">
            <summary>
                Флаг географии, определенной по геобъектному предлогу
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.Info.NamedInfoBase.Adjectives">
            <summary>
            List of inner adjectives
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.IEntity">
            <summary>
            Entity interface
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.ITextUnit">
            <summary>
            text unit common interface
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.ITextElement">
            <summary>
            Any part of the text. 
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.ITextElement.GetText">
            <summary>
            Returns content of container
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.ITextElement.WriteText(System.Text.StringBuilder)">
            <summary>
            Writes content of container inside builder
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextElement.ParentTextElement">
            <summary>
            Returns hierarhical parent of this text element
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextElement.NextTextElement">
            <summary>
            Returns first child element of the current element or next element in hierarchy
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextElement.PreviousTextElement">
            <summary>
            Returns previous text element
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextElement.IsEntity">
            <summary>
                Флаг сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextElement.IsUnmarkedText">
            <summary>
                Флаг сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextElement.IsSubSentence">
            <summary>
                Флаг сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextElement.IsSentence">
            <summary>
                Флаг сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextElement.IsUnitsContainer">
            <summary>
                Флаг сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextElement.IsText">
            <summary>
                Флаг сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.Text">
            <summary>
                Текстовое значение
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.UnitType">
            <summary>
                Тип
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.Position">
            <summary>
                Получение информации о положении юнита в тексте
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.Value">
            <summary>
            Returns value of text element
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.IsQuote">
            <summary>
                Indicates that this unit is quote
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.IsInDative">
            <summary>
                Indicates that this Unit is in dative case
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.IsInInstrumental">
            <summary>
                Indicates that this unit is in instrumental case
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.IsInLocative">
            <summary>
                Indicates that this unit is in locative case
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.IsInGenitive">
            <summary>
                Indicates that this unit is in genitive case
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.IsPerson">
            <summary>
            Indicates that unit is of person type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.IsParticiple">
            <summary>
            Indicates that unit is of person type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextUnit.IsAdjective">
            <summary>
            Indicates that unit is of person type
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.IEntity.HasType(Linguistics.Core.Enums.EntityType)">
            <summary>
            Checks that entity has defined type
            </summary>
            <param name="type">тип сущности</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.IEntity.HasCase(Linguistics.Core.Enums.Morphology.CaseType)">
            <summary>
            Returns true if this entity has defined case
            </summary>
            <param name="concreteCase"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.IEntity.GetValueCoreOrValue">
            <summary>
            Returns Value core string or value string if core is empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.EntityInfo">
            <summary>
                Информация о сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.Type">
            <summary>
            Type of entity
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.Link">
            <summary>
            Link to expansion entity
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.IsUsed">
            <summary>
            Indicates that entity is in usage
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.IsFiltered">
            <summary>
            Indicated that entities value should not be visible on semantic net
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.Language">
            <summary>
                Language of the entity
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.ValueCore">
            <summary>
            Entity's value core
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.FullValue">
            <summary>
                Полное значение сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.Role">
            <summary>
                Роль сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.Tonality">
            <summary>
            Entity's tonality information
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.IsInquiry">
            <summary>
            Indicates that entity should be used in tonality processing
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.IsInquiryInitial">
            <summary>
            Indicates that entity should be used in tonality processing and is initial
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.HasSnt">
            <summary>
            Indicates that tonality info has non-undefined sentiment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.HasSntfinal">
            <summary>
            Indicates that tonality info has non-undefined final sentiment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.Item(System.Int32)">
            <summary>
            Direct access to head elements in tree
            </summary>
            <param name="index">index of required child</param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IEntity.ChildrenCount">
            <summary>
            Returns amount of children
            <remarks>high performance call</remarks>
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.ISubSentenceContainer">
            <summary>
            It is used only to determine that an text element can contains subsentence
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.ITextWalker">
            <summary>
            This walker goes in depth of <see cref="T:Linguistics.Core.Interfaces.Text.ITextElement"/> tree and sends an each element to its subscribers
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.ITextWalker.WalkThrough(Linguistics.Core.Interfaces.Text.ITextElement)">
            <summary>
            Goes through tree in depth and sends each element to subscribers.
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.ITextWalker.Subscribe(Linguistics.Core.Interfaces.Text.ITextElementVisitor)">
            <summary>
            Adds subscriber.
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.ITextWalker.Unsubscribe(Linguistics.Core.Interfaces.Text.ITextElementVisitor)">
            <summary>
            Removes subscriber.
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.ITextWalker.MaximumIterations">
            <summary>
            Maximum iterations that could be commited walking down the tree
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.ITextElementVisitor">
            <summary>
            This is the interface of <see cref="T:Linguistics.Core.Interfaces.Text.ITextWalker"/> subscriber
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.ITextElementVisitor.BeforeFirstVisit">
            <summary>
            Method that should be called before new tree walk
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.ITextElementVisitor.Visit(Linguistics.Core.Interfaces.Text.ITextElement)">
            <summary>
            It is invoked from Walker
            </summary>
            <param name="textElement"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.ITextElementVisitor.AfterLastVisit">
            <summary>
            Method that should be called after text walk is ended
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.Entity.EntityTonality">
            <summary>
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.TonalityInfo">
            <summary>
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.TonalityInfo.Set(Linguistics.Core.Tonality.TonalityType,System.Int32)">
            <summary>
            Sets sentiment and sentiment strength
            </summary>
            <param name="snt"></param>
            <param name="frt"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.TonalityInfo.Set(Linguistics.Core.Tonality.TonalityType)">
            <summary>
            Sets sentiment type
            </summary>
            <param name="snt"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.TonalityInfo.SetFinal(Linguistics.Core.Tonality.TonalityType,System.Int32)">
            <summary>
            Sets final tonality parameters
            </summary>
            <param name="sntfinal">final tonality</param>
            <param name="frtfinal"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.TonalityInfo.SetFinal(Linguistics.Core.Tonality.TonalityType)">
            <summary>
            Sets final tonality sentiment type
            </summary>
            <param name="sntfinal"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.TonalityInfo.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.TonalityInfo.SNT">
            <summary>
            Sentiment type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.TonalityInfo.FRT">
            <summary>
            Sentiment strength
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.TonalityInfo.SNTFINAL">
            <summary>
            Final semntiment type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.TonalityInfo.FRTFINAL">
            <summary>
            Final sentiment strength
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.EntityTonality.IsInquiry">
            <summary>
            Indicates that this entity is inquiry entity
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.Entity.EntityTonality.IsInquiryInitial">
            <summary>
            Indicates that this entity is initial in inquiry chain
            </summary>
        </member>
        <member name="T:Linguistics.Core.Modules.DebugLogger">
            <summary>
            Logger that outputs messages using debug and trace classes
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Log.ILogManager">
            <summary>
            Logger wrapper
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Log.ILogManager.Info(System.String)">
            <summary>
            Writes info message into log
            </summary>
            <param name="message">message that should be written</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Log.ILogManager.Info(System.String,System.Object[])">
            <summary>
            Writes info as formatted message into log
            </summary>
            <param name="format">format string</param>
            <param name="args">formatted message parameters</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Log.ILogManager.Error(System.Exception,System.String)">
            <summary>
            Writes exception details into log
            </summary>
            <param name="exc"></param>
            <param name="message"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Log.ILogManager.Error(System.String)">
            <summary>
            Writes error message into log
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Log.ILogManager.Error(System.Exception)">
            <summary>
            Writes exception into log
            </summary>
            <param name="exc"></param>
        </member>
        <member name="M:Linguistics.Core.Modules.DebugLogger.Info(System.String)">
            <summary>
            Writes info message into log
            </summary>
            <param name="message">message that should be written</param>
        </member>
        <member name="M:Linguistics.Core.Modules.DebugLogger.Info(System.String,System.Object[])">
            <summary>
            Writes info as formatted message into log
            </summary>
            <param name="format">format string</param>
            <param name="args">formatted message parameters</param>
        </member>
        <member name="M:Linguistics.Core.Modules.DebugLogger.Error(System.Exception,System.String)">
            <summary>
            Writes exception details into log
            </summary>
            <param name="exc"></param>
            <param name="message"></param>
        </member>
        <member name="M:Linguistics.Core.Modules.DebugLogger.Error(System.String)">
            <summary>
            Writes error message into log
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Linguistics.Core.Modules.DebugLogger.Error(System.Exception)">
            <summary>
            Writes exception into log
            </summary>
            <param name="exc"></param>
        </member>
        <member name="T:Linguistics.Core.Modules.EmptyLogger">
            <summary>
            Logger that does nothing
            </summary>
        </member>
        <member name="M:Linguistics.Core.Modules.EmptyLogger.Info(System.String)">
            <summary>
            Writes info message into log
            </summary>
            <param name="message">message that should be written</param>
        </member>
        <member name="M:Linguistics.Core.Modules.EmptyLogger.Info(System.String,System.Object[])">
            <summary>
            Writes info as formatted message into log
            </summary>
            <param name="format">format string</param>
            <param name="args">formatted message parameters</param>
        </member>
        <member name="M:Linguistics.Core.Modules.EmptyLogger.Error(System.Exception,System.String)">
            <summary>
            Writes exception details into log
            </summary>
            <param name="exc"></param>
            <param name="message"></param>
        </member>
        <member name="M:Linguistics.Core.Modules.EmptyLogger.Error(System.String)">
            <summary>
            Writes error message into log
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Linguistics.Core.Modules.EmptyLogger.Error(System.Exception)">
            <summary>
            Writes exception into log
            </summary>
            <param name="exc"></param>
        </member>
        <member name="T:Linguistics.Core.Processing.TextProcessingSettings">
            <summary>
            Staged text processing settings
            </summary>
        </member>
        <member name="F:Linguistics.Core.Processing.TextProcessingSettings.Default">
            <summary>
            Represents default processing settings
            </summary>
        </member>
        <member name="M:Linguistics.Core.Processing.TextProcessingSettings.#ctor">
            <summary>
            Create new TextProcessing Settings instance
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.CoreferenceAbbreviations">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.CoreferencePersonsGlobal">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.CoreferencePersonsLocal">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.FiltrationEntitiesValue">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.SyntaxSufraceAnalysis">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.RecognitionNounPreds">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.RecognitionBanks">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.RecognitionPetrochemicals">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.RecognitionLaws">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.NormalizationSecondary">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsEntityTreeCorrectionSecondary">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsDeletePlaceFromOrg">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsConvertBadDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsDeleteBadDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsPersonNameAndRomanNumberUnion">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsPersonInfoInsidePersonName">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsHyphenDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsFindNextDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsFromToDates">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsRegionDelim">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsChangeDateToPlace">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsPersonUnitRus">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsPostHomogeneousGenetive">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsHomogeneous">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsHomogeneousAdj">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsDeleteNounifAdj">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsCDelimeterRus">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsOrgNoInfoPersonUnion">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsOrgGeoAbbrUnion">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsPersonOrgOrPlaceUnion">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsSkobkiDelete">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsDeletePersonFromOrg">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsDelBadProper">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsDelBadOrg">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsEntityTreeCorrectionInitial">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.HeuristicsDeleteShortWordForm">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.NormalizationInitial">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.SyntaxInitialAnalysis">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.NerCrf">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.NerDictionary">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.NerDictionarySemantics">
            <summary>
            Indicates whenever dictionary semantics should be used in tagging phase
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.LexicalAnalysis">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.RecognitionSimpleEntities">
            <summary>
            Indicates whenever simple entities recognition should be used
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.Preprocessing">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.ShowStagesTraceInformation">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.ShowStagesTimeStamps">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.ProcessingBuiltInOpinionCore">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.ProcessingBuiltInSentimentCore">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.ProcessingBuiltInLinguisticsCore">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.ProcessingReturnRdf">
            <summary>
            Flag that indicates whenever rdf should be return when processing is finished
            </summary>
        </member>
        <member name="P:Linguistics.Core.Processing.TextProcessingSettings.NerNormalForms">
            <summary>
            Indicates whenever normal forms should be analyzed within unit
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest">
            <summary>
            Contains text processing settings
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.#ctor(System.String,System.DateTime)">
            <summary>
            Creates new instace of request
            </summary>
            <param name="text"></param>
            <param name="baseDate"></param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.InputText">
            <summary>
            Input text that should be processed
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.Language">
            <summary>
            <see cref="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.InputText"/> language
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.SourceType">
            <summary>
            <see cref="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.InputText"/> source type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.DocumentType">
            <summary>
            type of <see cref="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.InputText"/> document
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.ProcessingMode">
            <summary>
            What type of processing should be used
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.BaseDate">
            <summary>
            Base date that will be used to resolve relative dates
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.ShouldOutputNormalizedText">
            <summary>
            Indicates whenever normalized text should be inserted into output
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextProcessing.TextProcessingRequest.Settings">
            <summary>
            Execution Stages settings
            </summary>
        </member>
        <member name="T:Linguistics.Core.Extensions.SerializationExtensions">
            <summary>
            Contains extension methods for serialization
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.SerializationExtensions.SerializeToXmlString``1(``0)">
            <summary>
            Serializes object into it's xml string representation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.SerializationExtensions.DeserializeFromXmlString``1(System.String)">
            <summary>
            Deserializes object from it's it xml string representation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Configuration.IOpinionMiningConfiguration">
            <summary>
            OM configuration
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.IOpinionMiningConfiguration.ResultLimit_MaxSentCountInText">
            <summary>
            Maximum sentences in text
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.IOpinionMiningConfiguration.ResultLimit_MaxObjectInOneSent">
            <summary>
            Maximum objects in sentence
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.IOpinionMiningConfiguration.ResultLimit_MaxSentLengthWithoutSpace">
            <summary>
            Maximum sentence length
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Configuration.IOpinionMiningConfiguration.LanguagesManager">
            <summary>
            Themes manager
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Filtering.IEntityFilter">
            <summary>
            Entity filter interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Filtering.IEntityFilter.FilterEntitiesByType(System.Xml.Linq.XElement@)">
            <summary>
                Фильтрация сущностей по их типу в иерархии
            </summary>
            <param name="xmlText"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Filtering.IEntityFilter.FilterEntities(System.Xml.Linq.XElement@,Linguistics.Core.Enums.JobProfile,System.Boolean)">
            <summary>
                фильтрация сущностей по стоп-правилам и стоп-словарям
            </summary>
            <param name="xmlText">xml-текст</param>
            <param name="profile"></param>
            <param name="isOnlyDictionaryFilter"></param>
            <returns>отфильтрованный xml</returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Filtering.IEntityFiltrator">
            <summary>
            Works with entity and indicates whenever entity could be filtered
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Filtering.IEntityFiltrator.EntityShouldBeFiltered(System.Xml.Linq.XElement)">
            <summary>
            Indicate that this entity should not be processed
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.DI.IImmutableScope">
            <summary>
            Immutable dependencies scope
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IImmutableScope.GetInstance``1">
            <summary>
            Returns instance of requested service type <typeparamref name="T"/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IImmutableScope.GetInstance``1(System.String)">
            <summary>
            Returns instance of requested service type <typeparamref name="T"/>
            </summary>
            <param name="serviceName">service specified name</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.RegEx.IEntityExpressionsContainer">
            <summary>
            Entity expressions provider interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.RegEx.IEntityExpressionsContainer.GetValueGroup(System.Text.RegularExpressions.Match)">
            <summary>
            Получение группы, содержащей значение сущности
            </summary>
            <param name="match">выделение</param>
            <returns>группа, содержащая значение сущности</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.RegEx.IEntityExpressionsContainer.GetAllTypes">
            <summary>
            Получение поддерживаемых типов
            </summary>
            <returns>поддерживаемые типы</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.RegEx.IEntityExpressionsContainer.GetExpression(System.String)">
            <summary>
            Получение выражения для выделения сущности по заданному типу
            </summary>
            <param name="type">тип выражения</param>
            <returns>выражение</returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.IDataBaseManager">
            <summary>
            Manager for the Linguistics database
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Resources.IDataBaseManager.ConvertSyntaxSqlToDbms(System.String)">
            <summary>
            Converts Syntax constructions SQL to databases
            </summary>
            <param name="language">requested language</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Resources.IDataBaseManager.ConvertSyntaxDbmsToSql(System.String)">
            <summary>
            
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Resources.IDataBaseManager.SetConstructionObjectProperties(System.Byte[],System.Object)">
            <summary>
            Converts <paramref name="binData"/> to construction object and sets properties in <paramref name="constriction"/>
            </summary>
            <param name="binData"></param>
            <param name="constriction"></param>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextMining.ITextMiningObjectsFiltrator">
            <summary>
            Sentiment analysis objects filtrator interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextMining.ITextMiningObjectsFiltrator.SiftOpinionMiningTuples(System.Collections.Generic.List{Linguistics.Core.OpinionMining.OpinionMiningTuple})">
            <summary>
            sift tuples
            </summary>
            <param name="tuples"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextMining.ITextMiningObjectsFiltrator.IsProcessableSubsent(System.Xml.Linq.XElement)">
            <summary>
            Indicates that subsent is processable
            </summary>
            <param name="subSent"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextMining.ITextMiningObjectsFiltrator.IsProcessableSentence(System.Xml.Linq.XElement)">
            <summary>
            Indicates that subsent is processable
            </summary>
            <param name="sent"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType">
            <summary>
            OM dictionaries
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion1">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion2">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion3">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion4">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion5">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion6">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion7">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.Phrasis1">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.Phrasis2">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.FirstWords1">
            <summary>
            single-words
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.IntrWords1">
            <summary>
            Multi-words
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.IntrWords2">
            <summary>
            single-words
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.EntityOpinion">
            <summary>
            multi-words
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeVerbs">
            <summary>
            Verbs dictionaries
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeVerbs.VerbsOpinion1">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion1"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeVerbs.VerbsOpinion2">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion2"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeVerbs.VerbsOpinion3">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion3"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeVerbs.VerbsOpinion4">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion4"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeVerbs.VerbsOpinion5">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion5"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeVerbs.VerbsOpinion6">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion6"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeVerbs.VerbsOpinion7">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.VerbsOpinion7"/>
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypePhrasis1">
            <summary>
            Phrasis dictionary 
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypePhrasis1.Phrasis1">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.Phrasis1"/>
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypePhrasis2">
            <summary>
            Phrasis dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypePhrasis2.Phrasis2">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.Phrasis2"/>
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeSingleWords">
            <summary>
            Single words dictionaries
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeSingleWords.FirstWords1">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.FirstWords1"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeSingleWords.IntrWords2">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.IntrWords2"/>
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeMultiWords">
            <summary>
            multiwords dictionary
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeMultiWords.IntrWords1">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.IntrWords1"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeMultiWords.EntityOpinion">
            <summary>
            <see cref="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryType.EntityOpinion"/>
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager">
            <summary>
            OM dictionaries manager
            </summary>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager.Exists(System.String)">
            <summary>
            Checks that word exists in dcitionary
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager.ExistsInVerbs(System.String,Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeVerbs)">
            <summary>
            Indicates that existst in verbs dictionary
            </summary>
            <param name="text"></param>
            <param name="dictionaryType"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager.GetPhrasis1Lists(System.String,Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypePhrasis1)">
            <summary>
            Retursn phrasis lists
            </summary>
            <param name="text"></param>
            <param name="dictionaryType"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager.GetPhrasis2Lists(System.String,Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypePhrasis2)">
            <summary>
            Returns phrasis lists
            </summary>
            <param name="text"></param>
            <param name="dictionaryType"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager.GetMultiWordsLists(System.String,Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypeMultiWords)">
            <summary>
            Returns multiwords lists
            </summary>
            <param name="text"></param>
            <param name="dictionaryType"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager.ExistsInPhrasis(System.String[],Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.DictionaryTypePhrasis1)">
            <summary>
            Indicates that exists in phrasis dictionary
            </summary>
            <param name="text"></param>
            <param name="dictionaryType"></param>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager.LanguageType">
            <summary>
            Type of language
            </summary>
        </member>
        <member name="P:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager.FirstWords1">
            <summary>
            Single words list
            </summary>
        </member>
        <member name="P:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.Dictionary.IDictionaryManager.IntrWords2">
            <summary>
            Inroductory words
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.ICitationPattern">
            <summary>
            Citation pattern interface
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPatternBase">
            <summary>
            base Pattern interface
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPattern">
            <summary>
            OM pattern common interface
            </summary>
        </member>
        <member name="P:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPattern.Type">
            <summary>
            Type of pattern
            </summary>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPatternBase.GetSubjectData(System.Xml.Linq.XElement,Linguistics.Core.Interfaces.TextMining.Opinion.ILanguage,Linguistics.Core.TextMining.SentimentAnalysisContext,System.Xml.Linq.XElement)">
            <summary>
            Returns subject data found in subsent
            </summary>
            <param name="subsent"></param>
            <param name="language"></param>
            <param name="context"></param>
            <param name="breakSearchElement"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPatternBase.GetSubjectData(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},Linguistics.Core.Interfaces.TextMining.Opinion.ILanguage,Linguistics.Core.TextMining.SentimentAnalysisContext,System.Xml.Linq.XElement)">
            <summary>
            Returns found subject data in list of element
            </summary>
            <param name="elements"></param>
            <param name="language"></param>
            <param name="context"></param>
            <param name="breakSearchElement"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.ICitationPattern.GetSubjectData4Citation(System.Xml.Linq.XElement,Linguistics.Core.Interfaces.TextMining.Opinion.ILanguage,Linguistics.Core.TextMining.SentimentAnalysisContext)">
            <summary>
            returns subjects in subsent
            </summary>
            <param name="subsent"></param>
            <param name="language"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IEssence">
            <summary>
            Subject selection processing element interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IEssence.CanBeProcessed">
            <summary>
            Indicates that element could be processed
            </summary>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextMining.Opinion.ILanguage">
            <summary>
            Language manager interface
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextMining.Opinion.ILanguage.LanguageType">
            <summary>
            Type of language
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextMining.Opinion.ILanguage.DictionaryManager">
            <summary>
            Inner dictionary manager of language
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.ILanguageIndependentPattern">
            <summary>
            Language independent pattern interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.ILanguageIndependentPattern.GetSubjectData(System.Xml.Linq.XElement,Linguistics.Core.TextMining.SentimentAnalysisContext,System.Xml.Linq.XElement)">
            <summary>
            Returns found subject data from subsent
            </summary>
            <param name="subsent"></param>
            <param name="context"></param>
            <param name="breakSearchElement"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.ILanguageIndependentPattern.GetSubjectData4Citation(System.Xml.Linq.XElement,Linguistics.Core.TextMining.SentimentAnalysisContext)">
            <summary>
            Returns found citation data fron subsent
            </summary>
            <param name="subsent"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextMining.Opinion.ILanguagesManager">
            <summary>
            Language manager interface
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextMining.Opinion.ILanguagesManager.Item(Linguistics.Core.Enums.LanguageType)">
            <summary>
            Returns language for the given language type
            </summary>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPatternsManager">
            <summary>
            Patterns manager interface
            </summary>
        </member>
        <member name="P:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPatternsManager.AllPatterns">
            <summary>
            Retursn list of all patterns
            </summary>
        </member>
        <member name="P:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPatternsManager.OrdinaryPatterns">
            <summary>
            Returns ordinary patterns
            </summary>
        </member>
        <member name="P:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPatternsManager.CitationPatterns">
            <summary>
            Returns citation patterns
            </summary>
        </member>
        <member name="P:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IPatternsManager.LangFreePatterns">
            <summary>
            Returns lang free patterns
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IRulesProcessor">
            <summary>
            OM rules processor
            </summary>
        </member>
        <member name="M:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.IRulesProcessor.Process(System.Xml.Linq.XElement,Linguistics.Core.Interfaces.TextMining.Opinion.ILanguage,Linguistics.TextMining.ObjectAllocateMethod,Linguistics.Core.TextMining.SentimentAnalysisContext)">
            <summary>
            Apply all language rules for the sent
            </summary>
            <param name="sent"></param>
            <param name="language"></param>
            <param name="objectAllocateMethod"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule">
            <summary>
            OM rules enum
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.DS_OneCitation_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.DS_OneCitation_02">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.DS_TwoCitation_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.DS_TwoSubsent_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.DS_TwoSubsent_02">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.DS_TwoSubsent_03">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.DS_TwoSubsent_Ex_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.DS_ThreeSubsent_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_OneSubsent_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_TwoSubsent_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_TwoSubsent_02">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_TwoSubsent_03">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_TwoSubsent_04">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_TwoSubsent_05">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_TwoSubsent_06">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_TwoSubsent_07">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ThreeSubsent_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ThreeSubsent_02">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_02">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_03">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_04">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_05">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_06">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_DanglingParticiple_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_DanglingParticipleAfterDS_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_Desc_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_Desc_02">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_Desc_03">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_Desc_04">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ParentChild_Desc_05">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ThreeParentChild_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.IS_ThreeParentChild_02">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule.Env_OneSubsent_01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="T:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType">
            <summary>
            OM Pattern types
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern01">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern02">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern03">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern04">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern05">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern06">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern07">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern08">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern09">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern10">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern11">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern12">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern13">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern15">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern16">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern17">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern18">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern19">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern20">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern21">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern22">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern23">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern24">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType.pattern25">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.IChildContent">
            <summary>
            Child content interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IChildContent.SetPreviousContent(Linguistics.Core.Interfaces.Contents.IChildContent)">
            <summary>
                Задание рядом стоящего предыдущего контента
            </summary>
            <param name="content">контент</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IChildContent.AddChild(Linguistics.Core.Interfaces.Contents.IChildContent)">
            <summary>
            Adds new content into this content
            </summary>
            <param name="newContent"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IChildContent.Contains(Linguistics.Core.Interfaces.Contents.IChildContent)">
            <summary>
            Checks if this content contains <paramref name="content"/> as child
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IChildContent.GetFullText">
            <summary>
            Получение полного текстового значения контента (с учетом дочерних контентов)
            </summary>
            <returns>полное текстовое значение контента</returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IChildContent.ParentContent">
            <summary>
            Returns Parent content for this content
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IChildContent.StartPosition">
            <summary>
                Начало в родительском контенте
                (данная позиция учитывает все предыдущие контенты такого же уровня в родительском контенте)
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IChildContent.PreviousSymbol">
            <summary>
                Предыдущий символ
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IChildContent.NextSymbol">
            <summary>
                Следующий символ
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IChildContent.ContentSelectorIndex">
            <summary>
                Индекс выделителя контента
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IChildContent.Type">
            <summary>
            Child content type
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.IChildContentSelector">
            <summary>
            Child Contents selector interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IChildContentSelector.Select(Linguistics.Core.Interfaces.Contents.IContent,System.Text.StringBuilder,Linguistics.Core.Interfaces.Contents.ChildrenContentsSelectionMode)">
            <summary>
            Selects child contents from text
            </summary>
            <param name="parent"></param>
            <param name="content"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IChildContentSelector.Save(Linguistics.Core.Interfaces.Contents.IChildContent,System.Int32,Linguistics.Core.Interfaces.Contents.ContentSelectionContext)">
            <summary>
            Сохранение заданного контента
            </summary>
            <param name="content">контент</param>
            <param name="position">позиция</param>
            <param name="context"></param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IChildContentSelector.Worker">
            <summary>
            Inner contents worker
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.IChildContentsSelectorsProvider">
            <summary>
            Content selectors provider
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IChildContentsSelectorsProvider.Item(Linguistics.Core.Interfaces.Contents.ChildrenContentsSelectionMode)">
            <summary>
            Get selector by selection mode
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.DI.IDependenciesScope">
            <summary>
            Dependencies container scope
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IDependenciesScope.Register``1(System.Func{``0},System.Boolean)">
            <summary>
            Registeres new dependency
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <param name="singleton">Flag that indicates that registered object should has per container lifetime</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IDependenciesScope.Register``1(System.Func{``0},System.String,System.Boolean)">
            <summary>
            Registeres new dependency with specified name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="creator"></param>
            <param name="serviceName"></param>
            <param name="singleton">Flag that indicates that registered object should has per container lifetime</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IDependenciesScope.Register``1(System.Func{Linguistics.Core.Interfaces.DI.IImmutableScope,``0},System.Boolean)">
            <summary>
            Registeres new dependency
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <param name="singleton">Flag that indicates that registered object should has per container lifetime</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IDependenciesScope.Register``1(System.Func{Linguistics.Core.Interfaces.DI.IImmutableScope,``0},System.String,System.Boolean)">
            <summary>
            Registeres new dependency with specified name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory"></param>
            <param name="serviceName"></param>
            <param name="singleton">Flag that indicates that registered object should has per container lifetime</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IDependenciesScope.Register``1(``0,System.Boolean)">
            <summary>
            Registeres new constant instance dependency
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="singleton">Flag that indicates that registered object should has per container lifetime</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IDependenciesScope.Register``1(``0,System.String,System.Boolean)">
            <summary>
            Registeres new constant instance dependency
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
            <param name="serviceName"></param>
            <param name="singleton">Flag that indicates that registered object should has per container lifetime</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IDependenciesScope.Register``2(System.Boolean)">
            <summary>
            Registeres new constant instance dependency
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TClass"></typeparam>
            <param name="singleton">Flag that indicates that registered object should has per container lifetime</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.DI.IDependenciesScope.Register``1(System.Boolean)">
            <summary>
            Registeres new constant instance dependency
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="singleton">Flag that indicates that registered object should has per container lifetime</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Morphology.IMorphologyAnalyzer">
            <summary>
            Describes morphology service interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.IMorphologyAnalyzer.GetWordMorphology(System.String,Linguistics.Core.Enums.Morphology.SearchZone)">
            <summary>
            Returns all forms of input word
            </summary>
            <param name="word">input word</param>
            <param name="searchZone">zone where to search for forms</param>
            <returns>list of pairs word->features</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.IMorphologyAnalyzer.GetFirstWordForm(System.String,Linguistics.Core.Enums.Morphology.SearchZone,Linguistics.Core.Interfaces.Morphology.MorphoFeature)">
            <summary>
            Gets string representation
            </summary>
            <param name="word"></param>
            <param name="searchZone"></param>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.IMorphologyAnalyzer.GetWordFormFeature(System.String,Linguistics.Core.Enums.Morphology.SearchZone)">
            <summary>
            Returns morpho characteristics of input word
            </summary>
            <param name="word">input word</param>
            <param name="searchZone"></param>
            <returns>morpho characteristics</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.IMorphologyAnalyzer.GetWordFormFeatures(System.String,Linguistics.Core.Enums.Morphology.SearchZone)">
            <summary>
            Returns morpho characteristics of input word
            </summary>
            <param name="word">input word</param>
            <param name="searchZone"></param>
            <returns>morpho characteristics</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.IMorphologyAnalyzer.GetSourceMorphoDictTypes(System.String)">
            <summary>
            Returns types of morpho dictionaries that contains <paramref name="word"/>
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.SemNet.ISemanticNetworkBuilder">
            <summary>
            Semantic network builder interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.SemNet.ISemanticNetworkBuilder.BuildSemanticNetwork(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            построить семантическую сеть документа
            </summary>
            <param name="xmlText">RDF</param>
            <param name="generateAllSubThemes">флаг генерации всех подтем</param>
            <returns>сем. сеть</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.SemNet.ISemanticNetworkBuilder.GetThemeList(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            получить список тем документа
            </summary>
            <param name="xmlText">RDF</param>
            <param name="generateAllSubThemes">флаг генерации всех подтем</param>
            <returns>список тем</returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Recognition.ISimpleEntitiesSelector">
            <summary>
            Simple entities selector interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Recognition.ISimpleEntitiesSelector.SelectSimpleEntities(System.String)">
            <summary>
                Выделение из текста сущностей по регулярным выражениям
            </summary>
            <param name="text">текст</param>
            <returns>выделенные сущности</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Recognition.ISimpleEntitiesSelector.SelectSimpleEntities(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
                Выделение из текста сущностей по заданному регулярному выражению
            </summary>
            <param name="text">текст</param>
            <param name="expression">регулярное выражение</param>
            <param name="type">тип сущности</param>
            <returns>выделенные сущности</returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextParsing.ITextParser">
            <summary>
            Provides access text parsing methods
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextParsing.ITextParser.ParseText(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Пропарсить текст
            </summary>
            <param name="text">текст</param>
            <param name="isBlogText"></param>
            <returns>коллекция параграфов</returns>
        </member>
        <member name="T:Linguistics.Core.Constants.ModulesNames">
            <summary>
            Class contains modules nicknames
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.ModulesNames.TextPreprocessors">
            <summary>
            Contains text preprocessors (string->string workers)
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.TextPreprocessors.Translit">
            <summary>
            Translit text preprocessor
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.TextPreprocessors.UpperTextPreprocessor">
            <summary>
            Upper text preprocessor
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.ModulesNames.EntitySelectors">
            <summary>
            Entity selectors services names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.EntitySelectors.Full">
            <summary>
            Ful processing selector service name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.EntitySelectors.Simple">
            <summary>
            Simple entities selection service name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.EntitySelectors.Ceterus">
            <summary>
            Ceterus entites selection service name
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.ModulesNames.PipelineProcessors">
            <summary>
            TextPipeline processors modules names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.PipelineProcessors.TextFull">
            <summary>
            full text processor
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.PipelineProcessors.TextSimple">
            <summary>
            processor with simplified processing
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.PipelineProcessors.XmlPatsearch">
            <summary>
            patsearch xml processor
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.PipelineProcessors.TextLexica">
            <summary>
            text processor that ouputs lexical processing result
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.ModulesNames.Filters">
            <summary>
            Filter modules names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.Filters.AdjectivesAndParticiples">
            <summary>
            AdjectivesAndParticiples filter module name
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.ModulesNames.Recognizers">
            <summary>
            Recognizers names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.Recognizers.Petrochemicals">
            <summary>
            Petrochemicals recognizer module name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.Recognizers.Banks">
            <summary>
            Banks recognizer module name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.Recognizers.Laws">
            <summary>
            Laws recognizer module name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.Recognizers.NounPreds">
            <summary>
            NounPreds recognizer module name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.Recognizers.Crf">
            <summary>
            Crf-based recognizer
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.Recognizers.Dictionary">
            <summary>
            Dictionary-based recognizer
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.ModulesNames.CoreferenceResolvers">
            <summary>
            Coreference resolvers modules names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.CoreferenceResolvers.Abbreviation">
            <summary>
            Abbreviations coreference resolver
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.CoreferenceResolvers.PersonSentences">
            <summary>
            Persons coreference resolver (sentence scope)
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.CoreferenceResolvers.PersonSubSentences">
            <summary>
            Persons coreference resolver (subsentence scope)
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.ModulesNames.Visitors">
            <summary>
            Visitors service names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.Visitors.GeographyFilter">
            <summary>
            Geography filter visitor service name
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.ModulesNames.CrfModelParsers">
            <summary>
            Crf model parsers services names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.CrfModelParsers.Html">
            <summary>
            Html model parser service name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.CrfModelParsers.Xml">
            <summary>
            Xml model parser service name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.ModulesNames.CrfModelParsers.Csv">
            <summary>
            Csv model parser service name
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.IHastablesDictionary">
            <summary>
            Hastables dictonary
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Resources.IHastablesDictionary.ContainsKey(System.String)">
            <summary>
            Indicates whenever hashtable contains requested index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Resources.IHastablesDictionary.GetKeys">
            <summary>
            Returns keys collectione
            </summary>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IHastablesDictionary.Item(System.String)">
            <summary>
            Provides search in dictionary and returns required hastable if that was found
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.IResourcesContainer">
            <summary>
            Module resources container
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IResourcesContainer.Hastables">
            <summary>
            hastables dictionary
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IResourcesContainer.Objects">
            <summary>
            lists dictionary
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.IResourcesManager">
            <summary>
            Provides access to all available resources
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IResourcesManager.StopDictionariesManager">
            <summary>
            Stop dictionaries manager
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IResourcesManager.ModulesResources">
            <summary>
            Modules resources provider
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Workers.IServiceFunctions">
            <summary>
            Interface for service functions provider
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IServiceFunctions.CorrectXml(System.String,System.String)">
            <summary>
            Замена запрещенных символов на их код в xml-тексте
            </summary>
            <param name="result">xml-текст</param>
            <param name="sourceText"></param>
            <returns>отрекдактированный xml</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IServiceFunctions.NormalizeValue(System.Xml.Linq.XElement@)">
            <summary>
            Нормализация значения VALUE сущностей
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IServiceFunctions.NormalizeEntityValue(System.String)">
            <summary>
            Normalizes string value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IServiceFunctions.ReplaceWrongSymbols(System.String)">
            <summary>
            Removes incorrect symbols from xml and replaces them with correct analogs
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IServiceFunctions.RenumberID(System.Xml.Linq.XElement@)">
            <summary>
            Renumbers IDs in xml 
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IServiceFunctions.GetThemeName(System.Xml.Linq.XElement)">
            <summary>
            Returns entity's theme name
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IServiceFunctions.GetSubject(Linguistics.ServiceInterfaces.DataContracts.Digest.SubjectEntity)">
            <summary>
            Creates essence from subject entity
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IServiceFunctions.GetObject(Linguistics.ServiceInterfaces.DataContracts.Digest.ObjectEntity)">
            <summary>
            Creates object essence from object entity
            </summary>
            <param name="objectEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IServiceFunctions.GetSubjectAnaphoriaTuple(Linguistics.Core.OpinionMining.SubjectAndAnaphoriaTuple)">
            <summary>
            Parses anaphoria tuple into next-level object representation
            </summary>
            <param name="tuple"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.IHashtableSearcher">
            <summary>
            Interface for collection of words that should support hastable search
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Resources.IHashtableSearcher.Contains(System.String,System.Boolean)">
            <summary>
            Indicates whenever table contains requested value
            </summary>
            <param name="value"></param>
            <param name="lowerize">indicates whenever value should be lowerized or not</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.IStopDictionariesManager">
            <summary>
            Stop dictionaries Manager interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Resources.IStopDictionariesManager.GetSet(Linguistics.Core.Enums.JobProfile)">
            <summary>
            Returns stop words set for <paramref name="profile"/>
            </summary>
            <param name="profile"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet">
            <summary>
            Stop dictionaries set interface
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.Collocations">
            <summary>
            Stop collocations hashtable searcher
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.WhiteCollocations">
            <summary>
            Allowed collocations hashtable searcher
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.AdjDeletedFromPersonNames">
            <summary>
            Adjectives excluded from Person Name Value
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.AllowedPN">
            <summary>
            Person names which can be employed with adjectives from the list AdjDeletedFromPersonNames
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.EntityWords">
            <summary>
            Stop entity words hastable searcher
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.MainNouns">
            <summary>
            Stop main nouns hastable searcher
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.AdjectivesWords">
            <summary>
            Stop adjectives hastable searcher
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.NeverThemeWords">
            <summary>
            Geographic words hastable searcher
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.GeographicWords">
            <summary>
            Geographic words hastable searcher
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.GeoProfs">
            <summary>
            Geo profs hastable searcher
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Resources.IStopDictionariesSet.Profile">
            <summary>
            Set profile
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.ModulesResx">
            <summary>
            Provides names for modules resources dictionaries
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.ModulesResx.Bank">
            <summary>
            Provides names for bank recornizer resources
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Bank.BankPrefixes">
            <summary>
            Bank prefixes dictionary resource name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Bank.NotBankPrefixes">
            <summary>
            Non-bank prefixes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Bank.OwnershipAbbreviation">
            <summary>
            Ownership Abbreviation dictionary
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax">
            <summary>
            Provides surface syntax analyzer resources names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.NegationParticles">
            <summary>
            Частицы отрицания
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.OtherEnumeration">
            <summary>
            Прочие перечисления
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.HomogeneousConjunctions">
            <summary>
            Однородные союзы
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.ConjunctionExclusions">
            <summary>
            Коллекция исключений из союзов и союзных слов
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.Parenthesis">
            <summary>
            вводные слова и словосочетания
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.Adjuncts">
            <summary>
            обстоятельственные слова
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.IndefinitePronouns">
            <summary>
            неопределенные местоимения
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.QuestionWords">
            <summary>
            Вопросительные слова
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.ConjunctionDict">
            <summary>
            словари союзов и союзных слов = ""; перед которыми обязательная запятая
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.ConjunctionDict.Subordinate">
            <summary>
            Subordinate conjunctions dict
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Syntax.ConjunctionDict.Default">
            <summary>
            Default subsent conjunctions list
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.ModulesResx.TextParser">
            <summary>
            Text parser resources names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.TextParser.BeforeNoProper">
            <summary>
            Сокращение не перед именем собственным
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.TextParser.BeforeProperOrNumber">
            <summary>
            Сокращение перед именем собственным или числом
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.TextParser.Domens">
            <summary>
            Доменные зоны
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.TextParser.Interjections">
            <summary>
            Междометия
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.TextParser.FamilyPrefixes">
            <summary>
            Префиксы фамилий
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.TextParser.Smiles">
            <summary>
            Смайлики
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering">
            <summary>
            Filresing resources names
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.Collocations">
            <summary>
            Collocations collection name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.WhiteCollocations">
            <summary>
            Collocations collection name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.AdjDeletedFromPersonNames">
            <summary>
            Adjectives deleted from person name value
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.AllowedPN">
            <summary>
            Adjectives allowed only with ORG
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.EntityWords">
            <summary>
            EntityWords collection name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.MainNouns">
            <summary>
            Main nouns collection name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.AdjectivesWords">
            <summary>
            adjectives collection name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.NeverThemeWords">
            <summary>
            Adjectives allowed only with ORG
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.GeographicWords">
            <summary>
            geo collection name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.Filtering.GeoProfs">
            <summary>
            geo collection name
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Resources.ModulesResx.NounPred">
            <summary>
            provides names for NounPred recognizer resources
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Resources.ModulesResx.NounPred.NounPredDictionary">
            <summary>
            NounPred dictionary resource name
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.IContentSelector">
            <summary>
            Content selector interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentSelector.SelectContents(Linguistics.Core.Interfaces.Contents.IContent,System.Text.StringBuilder,Linguistics.Core.Interfaces.Contents.IChildContentSelector,Linguistics.Core.Interfaces.Contents.ContentSelectionContext)">
            <summary>
            Selects contents and puts result into container
            </summary>
            <param name="parent"></param>
            <param name="content"></param>
            <param name="resultContainer"></param>
            <param name="context"></param>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.AdverbClass">
            <summary>
            Класс наречия
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbClass.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbClass.InterrogativeRelative">
            <summary>
            Вопросительно - относительное
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.AdverbType">
            <summary>
            Тип наречия
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.QualitativeCircumstance">
            <summary>
            Качественно - обстоятельное наречие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.QualitativeQuantitive">
            <summary>
            Качественно-количественное наречие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.Action">
            <summary>
            Действие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.Degree">
            <summary>
            Степень
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.Time">
            <summary>
            Время
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.Place">
            <summary>
            Место
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.Cause">
            <summary>
            Причина
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.Aim">
            <summary>
            Цель
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AdverbType.Condition">
            <summary>
            Условие
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.AnimationType">
            <summary>
            Одушевленность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AnimationType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AnimationType.Animation">
            <summary>
            Одушевленный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.AnimationType.Inanimation">
            <summary>
            Неодушевленный
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.CaseType">
            <summary>
            Падеж
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CaseType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CaseType.Nominative">
            <summary>
            Именительный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CaseType.Genitive">
            <summary>
            Родительный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CaseType.Dative">
            <summary>
            Дательный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CaseType.Accusative">
            <summary>
            Винительный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CaseType.Instrumental">
            <summary>
            Творительный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CaseType.Locative">
            <summary>
            Предложный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CaseType.Common">
            <summary>
            Общий
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.CommonType">
            <summary>
            Нарицательность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CommonType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CommonType.Common">
            <summary>
            Нарицательное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CommonType.Proper">
            <summary>
            Собственное
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.ConjunctionType">
            <summary>
            Союз
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.ConjunctionType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.ConjunctionType.Coordinating">
            <summary>
            Сложносочиненный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.ConjunctionType.Subordinating">
            <summary>
            Сложноподчиненный
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.CountType">
            <summary>
            Исчисляемость
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CountType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CountType.NotCount">
            <summary>
            Не исчисляемое
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.CountType.Count">
            <summary>
            Исчисляемое
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.DegreeType">
            <summary>
            Степень сравнения
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.DegreeType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.DegreeType.Comparative">
            <summary>
            Сравнительная
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.DegreeType.Superlative">
            <summary>
            Превосходная
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.DegreeType.EstimationsSubjectiveForm">
            <summary>
            Оценочно - субъективная форма
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.DeterminerType">
            <summary>
            Определитель
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.DeterminerType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.DeterminerType.PreDeterminer">
            <summary>
            Предопределитель
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.GenderType">
            <summary>
            Род
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.GenderType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.GenderType.Female">
            <summary>
            Женский
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.GenderType.Masculine">
            <summary>
            Мужской
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.GenderType.Neutral">
            <summary>
            Средний
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.GenderType.General">
            <summary>
            Общий
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.MoodType">
            <summary>
            Наклонение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MoodType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MoodType.Imperative">
            <summary>
            Повелительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MoodType.Indicative">
            <summary>
            Изъявительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MoodType.Subjunctive">
            <summary>
            Сослагательное
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Morphology.MorphoFeature">
            <summary>
            Описание морфологической характеристики
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoFeature.#ctor">
            <summary>
            Creates new morpho feature
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoFeature.IsIntersectsWith(Linguistics.Core.Interfaces.Morphology.MorphoFeature)">
            <summary>
            Checks if feature intersects with another feature
            </summary>
            <param name="feature"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoFeature.ToXElement">
            <summary>
            Converts MorphoFeature into xml element
            </summary>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.PartOfSpeech">
            <summary>
            часть речи
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.AnimInAnimType">
            <summary>
            одушевленность
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.AspectType">
            <summary>
            вид глаголов
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.AdverbType">
            <summary>
            тип наречия
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.CaseType">
            <summary>
            падеж
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.CountType">
            <summary>
            исчисляемость
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.CommonType">
            <summary>
            нарицательность
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.DegreeType">
            <summary>
            степень сравнения
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.GenderType">
            <summary>
            род
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.NumberType">
            <summary>
            число
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.NumericType">
            <summary>
            тип числительного
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.NegativeType">
            <summary>
            характеристика отрицания
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.OfficialType">
            <summary>
            тип служебной части речи
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.PhaseVerbType">
            <summary>
            фазисность
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.PersonType">
            <summary>
            лицо
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.PronounGroup">
            <summary>
            группа местоимений
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.PronounClass">
            <summary>
            класс местоимений
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.ShortType">
            <summary>
            краткость
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.AdverbClass">
            <summary>
            класс наречий
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.ConjunctionType">
            <summary>
            тип союза
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.DeterminerType">
            <summary>
            тип определителя
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.TimeType">
            <summary>
            время
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.TransitionalType">
            <summary>
            переходность
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.VoiceType">
            <summary>
            залог
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.VerbForm">
            <summary>
            форма глагола
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.VerbType">
            <summary>
            тип глагола
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Morphology.MorphoFeature.MoodType">
            <summary>
            наклонение глагола
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.IRelations`2">
            <summary>
                Интерфейс для доступа к связанным элементам
            </summary>
            <typeparam name="TElement">тип элемента</typeparam>
            <typeparam name="TParent">тип родителя</typeparam>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IRelations`2.Parent">
            <summary>
                Родительский объект
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IRelations`2.Previous">
            <summary>
                Предыдущий элемент
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IRelations`2.Next">
            <summary>
                Следующий элемент
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Text.IRelations`2.Current">
            <summary>
                Текущий элемент
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Text.UnitPosition">
            <summary>
                Информации о положении юнита
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Text.UnitPosition.Start">
            <summary>
                Начальная позиция в тексте
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Text.UnitPosition.End">
            <summary>
                Конечная позиция в тексте
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.UnitPosition.CompareTo(Linguistics.Core.Interfaces.Text.UnitPosition)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.UnitPosition.Equals(Linguistics.Core.Interfaces.Text.UnitPosition)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.UnitPosition.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.UnitPosition.op_Equality(Linguistics.Core.Interfaces.Text.UnitPosition,Linguistics.Core.Interfaces.Text.UnitPosition)">
            <summary>
            Compare operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.UnitPosition.op_Inequality(Linguistics.Core.Interfaces.Text.UnitPosition,Linguistics.Core.Interfaces.Text.UnitPosition)">
            <summary>
            Compare operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.UnitPosition.op_LessThan(Linguistics.Core.Interfaces.Text.UnitPosition,Linguistics.Core.Interfaces.Text.UnitPosition)">
            <summary>
            Compare operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.UnitPosition.op_GreaterThan(Linguistics.Core.Interfaces.Text.UnitPosition,Linguistics.Core.Interfaces.Text.UnitPosition)">
            <summary>
            Compare operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Text.UnitPosition.Equals(System.Object)">
            <summary>
            Compare operator
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Semantics.SemanticFeature">
            <summary>
            Managed semantic feature implementation
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.SemanticType">
            <summary>
            Semantic type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.TimeIntervalType">
            <summary>
            Time type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.PlaceType">
            <summary>
            Place type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.MeasureType">
            <summary>
            Measure type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.PersonType">
            <summary>
            Person type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.OrganizationType">
            <summary>
            Organization type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.VerbType">
            <summary>
            Verb type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.ServiceTypes">
            <summary>
            Service type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.Info">
            <summary>
            Info type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.Material">
            <summary>
            Material type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.Transport">
            <summary>
            Transport type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.Building">
            <summary>
            Building type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.VBeType">
            <summary>
            Verb be type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.VAcquirePossessType">
            <summary>
            Verb Acquire-Possess Type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.VEndType">
            <summary>
            Verb end type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.MFood">
            <summary>
            Material food type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.MForFreeTime">
            <summary>
            Material free time type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.DisasterType">
            <summary>
            Disaster type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.PlannedEventType">
            <summary>
            Planned event type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.VAcquireType">
            <summary>
            Verb acquire type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.SportEventType">
            <summary>
            Sport event type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.City">
            <summary>
            City type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.Area">
            <summary>
            Area type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.District">
            <summary>
            District type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.Metro">
            <summary>
            Metro type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.TournamentType">
            <summary>
            Tournament type
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Semantics.SemanticFeature.Generic">
            <summary>
            Generic semantic type
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Syntax.SyntaxCategoryType">
            <summary>
            Syntax Category type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.Undefined">
            <summary>
            неопределено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.SubjectFin">
            <summary>
            подлежащее
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.SubjectInfin">
            <summary>
            косвенное дополнение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.Main">
            <summary>
            сказуемое
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.Object">
            <summary>
            дополнение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.PrepositionObject">
            <summary>
            дополнение с предлогом
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.Attribute">
            <summary>
            определение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.SubjectComplement">
            <summary>
            дополнение к подлежащему
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.ObjectComplement">
            <summary>
            дополнение к прямому дополнению
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.Ajunct">
            <summary>
            обстоятельство
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctTimeSource">
            <summary>
            обстоятельство времени - начальная точка
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctTimeFixedPoint">
            <summary>
            обстоятельство времени - фиксированная точка
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctTimeEnd">
            <summary>
            обстоятельство времени - конечная точка
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctTimeDuration">
            <summary>
            обстоятельство времени - протяженность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctPlaceSource">
            <summary>
            обстоятельство места - начальная точка
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctPlaceFixedPoint">
            <summary>
            обстоятельство места - фиксированная точка
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctPlaceEnd">
            <summary>
            обстоятельство места - конечная точка
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctGoal">
            <summary>
            обстоятельство цели
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctCause">
            <summary>
            обстоятельство причины
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctMeasure">
            <summary>
            обстоятельство меры
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AjunctManner">
            <summary>
            обстоятельство образа действия
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.Determiner">
            <summary>
            определитель
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.Chain">
            <summary>
            связь внутри сложного сказуемого
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.ObjectOfPreposition">
            <summary>
            дополнение к предлогу
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.MainEntity">
            <summary>
            главная сущность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.AdditionalEntity">
            <summary>
            дополнительная сущность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.Predicate">
            <summary>
            предикат
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.WhoDefinition">
            <summary>
            определение к одушевленному субъекту
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.WhatDefinition">
            <summary>
            определение к неодушевленному субъекту
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.NameDefinition">
            <summary>
            определение к имени
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.VerbModifier">
            <summary>
            модификатор глагола
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Syntax.SyntaxCategoryType.Title">
            <summary>
            загловок текста
            </summary>
        </member>
        <member name="T:Linguistics.Core.TextMining.Dictionaries.MultiWordWeightDictionaryResult`1">
            <summary>
            Multiword weight dictionary request response
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Linguistics.Core.TextMining.Dictionaries.MultiWordWeightDictionaryResult`1.#ctor(`0,System.Collections.Generic.IList{Linguistics.Core.TextMining.Dictionaries.StringArrayWeight})">
            <summary>
            Creates new result instance
            </summary>
            <param name="dictionaryType"></param>
            <param name="stringArrayWeightList"></param>
        </member>
        <member name="P:Linguistics.Core.TextMining.Dictionaries.MultiWordWeightDictionaryResult`1.DictionaryType">
            <summary>
            Dictionary type
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Dictionaries.MultiWordWeightDictionaryResult`1.StringArrayWeightList">
            <summary>
            Weights list
            </summary>
        </member>
        <member name="T:Linguistics.Core.TextMining.Dictionaries.OneWordWeightDictionaryResult`1">
            <summary>
            One word weight ditionary result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Linguistics.Core.TextMining.Dictionaries.OneWordWeightDictionaryResult`1.#ctor(`0,System.Int32)">
            <summary>
            Create new result
            </summary>
            <param name="dictionaryType"></param>
            <param name="weight"></param>
        </member>
        <member name="P:Linguistics.Core.TextMining.Dictionaries.OneWordWeightDictionaryResult`1.DictionaryType">
            <summary>
            Dictionary type
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Dictionaries.OneWordWeightDictionaryResult`1.Weight">
            <summary>
            Weight of the result
            </summary>
        </member>
        <member name="T:Linguistics.Core.TextMining.Opinion.PatternDictionary`1">
            <summary>
            Pattern's dictionary
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.PatternDictionary`1.#ctor(System.Collections.Generic.IDictionary{Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType,`0})">
            <summary>
            Creates new dictionary
            </summary>
            <param name="patterns"></param>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.PatternDictionary`1.Item(Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.PatternType)">
            <summary>
            Returns pattern for the given pattern type
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.TextMining.Opinion.SubjectData">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.SubjectData.#ctor(System.Collections.Generic.List{Linguistics.Core.OpinionMining.SubjectEssence},System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.SubjectData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.SubjectData.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.SubjectData.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.SubjectData.SubjectEssences">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.SubjectData.LeftExtremeElement">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.SubjectData.RightExtremeElement">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="T:Linguistics.Core.TextMining.Opinion.SubjectObjectsTuple">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.SubjectObjectsTuple.#ctor(System.Collections.Generic.IEnumerable{Linguistics.Core.TextMining.Opinion.SubjectData},System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.SubjectObjectsTuple.#ctor(System.Collections.Generic.IEnumerable{Linguistics.Core.TextMining.Opinion.SubjectData},System.Collections.Generic.IEnumerable{Linguistics.Core.OpinionMining.ObjectEssence},Linguistics.Core.IntermediateInterfaces.TextMining.Opinion.OMRule)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.SubjectObjectsTuple.Subjects">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.SubjectObjectsTuple.Objects">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.SubjectObjectsTuple.RuleId">
            <summary>
            Rule that triggered this tuple creation
            </summary>
        </member>
        <member name="T:Linguistics.Core.TextMining.Tonality.Primitives.Dictionary.MultiWordWeightDictionary">
            <summary>
            MultiWordWeightDictionary
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.Tonality.Primitives.Dictionary.MultiWordWeightDictionary.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            Creates new dictionary
            </summary>
            <param name="fileName"></param>
            <param name="checkOnExistsWeightValue"></param>
        </member>
        <member name="M:Linguistics.Core.TextMining.Tonality.Primitives.Dictionary.MultiWordWeightDictionary.GetListOfStringArrayWeight(System.String)">
            <summary>
            Returns list of weights arrays
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.TextMining.Tonality.Primitives.Dictionary.MultiWordWeightDictionary.FileName">
            <summary>
            Filename from whitch dictionary was created
            </summary>
        </member>
        <member name="T:Linguistics.Core.TextMining.Tonality.Primitives.Dictionary.OneWordWeightDictionary">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.Tonality.Primitives.Dictionary.OneWordWeightDictionary.#ctor(System.String,System.Nullable{System.Boolean})">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.Tonality.Primitives.Dictionary.OneWordWeightDictionary.GetWeigth(System.String)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Tonality.Primitives.Dictionary.OneWordWeightDictionary.FileName">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="T:Linguistics.Core.TextMining.Dictionaries.StringArrayWeight">
            <summary>
            List of associated weight
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.Dictionaries.StringArrayWeight.#ctor(System.String[],System.Int32)">
            <summary>
            Create new weights list
            </summary>
            <param name="stringArray"></param>
            <param name="weight"></param>
        </member>
        <member name="P:Linguistics.Core.TextMining.Dictionaries.StringArrayWeight.StringArray">
            <summary>
            words list
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Dictionaries.StringArrayWeight.Weight">
            <summary>
            Weight
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.ContentSelectionContext">
            <summary>
            Contents selection context instance
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.ContentSelectionContext.#ctor(Linguistics.Core.Interfaces.Contents.IContentSelector[])">
            <summary>
            Creates new instance of context
            </summary>
            <param name="selectors"></param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.ContentSelectionContext.Selectors">
            <summary>
            Contents selectors that are used in this concrete selection operation
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.ContentSelectionContext.CurrentSelectorIndex">
            <summary>
                Индекс текущего выделителя дочерних контентов
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.ChildrenContentsSelectionMode">
            <summary>
            Режим выделения дочерних контентов
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ChildrenContentsSelectionMode.All">
            <summary>
            Все
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ChildrenContentsSelectionMode.Brackets">
            <summary>
            Текст в скобках
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ChildrenContentsSelectionMode.DirectSpeech">
            <summary>
            Прямая речь
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ChildrenContentsSelectionMode.Slogan">
            <summary>
            Лозунг
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ChildrenContentsSelectionMode.None">
            <summary>
            Ничего не выделять
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.IContentsWorker">
            <summary>
            Calculates contents positions
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentsWorker.GetRealPosition(System.Int32)">
            <summary>
            Получение реальной позиции (с учетом всех выделенных и убранных контентов) для заданной позиции
            </summary>
            <param name="currentPosition">заданная позиция</param>
            <returns>реальная позиция</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentsWorker.GetRealPositionShift(System.Int32)">
            <summary>
            Получение сдвига реальной позиции с учетом всех выделенных и убранных контентов
            </summary>
            <param name="realPosition">реальная позиция</param>
            <returns>сдвиг</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentsWorker.Add(Linguistics.Core.Interfaces.Contents.ShiftContentInfo)">
            <summary>
            Adds new shift position
            </summary>
            <param name="shift"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentsWorker.RemoveContent(System.Int32,System.Int32@)">
            <summary>
                Удаление заданного контента
            </summary>
            <param name="shiftContentIndex">индекс в коллекции контентов для вычисления сдвига</param>
            <param name="contentIndex">индекс в коллекции выделенных контентов</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentsWorker.Clear">
            <summary>
            Clears shifts information;
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentsWorker.GetLastChild(System.Int32)">
            <summary>
            Получение последнего дочернего контента до заданной позиции
            </summary>
            <param name="realPosition">реальная позиция</param>
            <returns>последний дочерний контент</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.IContentsWorker.Insert(System.Int32,Linguistics.Core.Interfaces.Contents.IChildContent,System.Int32,System.Int32)">
            <summary>
            Inserts new content and shift info
            </summary>
            <param name="index"></param>
            <param name="content"></param>
            <param name="shiftContentIndex"></param>
            <param name="position"></param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IContentsWorker.Contents">
            <summary>
            Inner Contents
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Contents.IContentsWorker.Shifts">
            <summary>
            Inner shifts
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Contents.ShiftContentInfo">
            <summary>
                Информация для вычисления сдвига
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Contents.ShiftContentInfo.#ctor(Linguistics.Core.Interfaces.Contents.IChildContent,System.Int32)">
            <summary>
            Creates new instance of shift
            </summary>
            <param name="content"></param>
            <param name="position"></param>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ShiftContentInfo.Content">
            <summary>
                Контент
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Contents.ShiftContentInfo.Position">
            <summary>
                Позиция, по которой вычисляется сдвиг
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextParsing.ITextParagraph">
            <summary>
            Text parsing sentence abstraction
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextParsing.ITextPart">
            <summary>
            Represents part of the text
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextParsing.ITextPart.AppendNextPart(Linguistics.Core.Interfaces.TextParsing.ITextPart)">
            <summary>
            Добавление части текста, следующей непосредственно за данной.
            В противном случае добавления не произойдет.
            </summary>
            <param name="nextPart">следующая часть текста</param>
            <returns>результат добавления части</returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextParsing.ITextPart.Parent">
            <summary>
            Родительская часть текста
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextParsing.ITextPart.Text">
            <summary>
            Текст
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextParsing.ITextPart.StartPosition">
            <summary>
            Позиция начала части текста
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextParsing.ITextPart.EndPosition">
            <summary>
            Позиция конца части текста
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextParsing.ITextParagraph.SetSentences(System.Collections.Generic.List{Linguistics.Core.Interfaces.TextParsing.ITextSentence})">
            <summary>
            Задание коллекции предложений.
            Для предложений устанавливается свойство Parent на данный параграф
            </summary>
            <param name="sentences">коллекция предложений</param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextParsing.ITextParagraph.Sentences">
            <summary>
            Коллекция предложений
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextParsing.ITextSentence">
            <summary>
            Text sentence interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextParsing.ITextSentence.GetFullStartPosition">
            <summary>
            Начало предложение относительного целого текста
            </summary>
            <returns>начало предложения</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextParsing.ITextSentence.GetFullEndPosition">
            <summary>
            Конец предложения относительного целого текста
            </summary>
            <returns>конец предложения</returns>
        </member>
        <member name="P:Linguistics.Core.Interfaces.TextParsing.ITextSentence.ShouldBeProcessed">
            <summary>
            Флаг обработки предложения
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Recognition.SimpleEntity">
            <summary>
            Простая сущность
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Recognition.SimpleEntity.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create new 
            </summary>
            <param name="text"></param>
            <param name="startPosition"></param>
            <param name="type"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Recognition.SimpleEntity.AddChild(Linguistics.Core.Interfaces.Recognition.SimpleEntity)">
            <summary>
            Добавление дочерней сущности
            </summary>
            <param name="entity">дочерняя сущность</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Recognition.SimpleEntity.IsIntersect(Linguistics.Core.Interfaces.Recognition.SimpleEntity)">
            <summary>
            Проверка, что указанная сущность пересекается с данной
            </summary>
            <param name="entity">сущность</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Recognition.SimpleEntity.IsPositionInsideEntity(System.Int32)">
            <summary>
            Проверка, что указанная позиция попадает внутрь сущности
            </summary>
            <param name="position">позиция</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Recognition.SimpleEntity.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Recognition.SimpleEntity.AddSortedChildRange(System.Collections.Generic.IEnumerable{Linguistics.Core.Interfaces.Recognition.SimpleEntity})">
            <summary>
            Добавить список детей. 
            Дети в списке расположены по возрастанию их позиций в исходной строке.
            </summary>
            <param name="entitiesWithCurrentTypeToAdd">Список детей для добавления</param>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Recognition.SimpleEntity.Type">
            <summary>
            Тип
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Recognition.SimpleEntity.IsFiltered">
            <summary>
            Indicates that entity and all it's parents and children should be filtered from processing
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Recognition.SimpleEntity.Text">
            <summary>
            Текст
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Recognition.SimpleEntity.Value">
            <summary>
            Значение
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Recognition.SimpleEntity.StartPosition">
            <summary>
            Начальная позиция
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Recognition.SimpleEntity.Length">
            <summary>
            Длина сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Interfaces.Recognition.SimpleEntity.Children">
            <summary>
            Дочерние сущности
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.AnaforLinkTypeEnum">
            <summary>
            Type of anaphora link
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.__UNDEFINE__">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.LINK">
            <summary>
            Link
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.P_LINK">
            <summary>
            Person Link
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.P_LINK_SUBSENT">
            <summary>
            person link in subsent
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.D_LINK">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.D_LINK_SUBSENT">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.CAT_LINK">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.CAT_LINK_SUBSENT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.AUT_LINK">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.AnaforLinkTypeEnum.SPEECH_LINK">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.EntityRole">
            <summary>
                Роль сущности в предложении
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityRole.Undefined">
            <summary>
                Не задана
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityRole.Adj">
            <summary>
                Обстоятельство
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityRole.Adjective">
            <summary>
                Прилагательное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityRole.Adverb">
            <summary>
                Наречие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityRole.Obj">
            <summary>
                Дополнение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityRole.Other">
            <summary>
                Другая
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityRole.Subj">
            <summary>
                Подлежащее
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.EntityType">
            <summary>
                Тип сущности
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Undefined">
            <summary>
            Undefined entity type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Adverb">
            <summary>
                Наречие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Conjunction">
            <summary>
                Союз
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Default">
            <summary>
                значение по умолчанию
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Date">
            <summary>
                Диапазон времени
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Deepr">
            <summary>
                Деепричастие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Homogeneous">
            <summary>
                Цепочка однородных сущностей
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Numeric">
            <summary>
                Числительные и числа
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.NounVerb">
            <summary>
                Отглагольное существительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Participle">
            <summary>
                Причастие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.PersonName">
            <summary>
                Персона с фамилией
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.PersonInfo">
            <summary>
                Персона
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.PersonNoInfo">
            <summary>
                Профессия или должность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.PlaceName">
            <summary>
                Географическое название
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.PlaceNoInfo">
            <summary>
                Тип географического объекта
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Predicative">
            <summary>
                Предикатив
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Pretext">
            <summary>
                Предлог
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Pronoun">
            <summary>
                Местоимение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.OrgName">
            <summary>
                Юридическое лицо
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.OrgAbbr">
            <summary>
                Аббревиатура
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.OrgNoInfo">
            <summary>
                Тип организации
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Unknown">
            <summary>
                Согласованная цепочка слов
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.UnknownProper">
            <summary>
                Неидентифицированные объекты
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Verb">
            <summary>
                Глагол
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.PseudoGeo">
            <summary>
                Географический объект, не прошедший проверки по словарю
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Quote">
            <summary>
                Кавычка
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Adjective">
            <summary>
                Прилагательное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.ShortAdjective">
            <summary>
                Краткое прилагательное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Address">
            <summary>
                Адрес
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Email">
            <summary>
                Электронная почта
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.BankAccount">
            <summary>
                Банковский счет
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.URL">
            <summary>
                url
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Phone">
            <summary>
                Номер телефона
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.INN">
            <summary>
                ИНН
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Money">
            <summary>
                Денежные данные
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Slogan">
            <summary>
                Лозунг
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Index">
            <summary>
                Индекс
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Street">
            <summary>
                Улица
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.House">
            <summary>
                Дом
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Corps">
            <summary>
                Корпус
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Building">
            <summary>
                Строение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Flat">
            <summary>
                Квартира
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Distance">
            <summary>
                Расстояние
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Weight">
            <summary>
                Вес
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Event">
            <summary>
                Событие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Product">
            <summary>
                Продукт
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.QuestionWord">
            <summary>
                Вопросительное слово
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Infinitive">
            <summary>
                Инфинитив
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Comparative">
            <summary>
                Сравнительная степень прилагательного
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Superlative">
            <summary>
                Превосходная степень прилагательного
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.OGRN">
            <summary>
                ОГРН и ОГРНИП
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.OKPO">
            <summary>
                ОКПО
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.SNILS">
            <summary>
                СНИЛС
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Bank">
            <summary>
                Банк
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Law">
            <summary>
                Закон
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.LawInfo">
            <summary>
                Информация о законе
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.LawProposal">
            <summary>
                Законопроект
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Petrochemicals">
            <summary>
                Нефтепродукт
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.InformationAgency">
            <summary>
            Информационное агентство
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.NounPred">
            <summary>
            Предикативное существительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.UnknownDate">
            <summary>
            Абстрактная дата
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.UnknownMoney">
            <summary>
            Информация о деньгах
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.TwitterName">
            <summary>
            Имя пользователя Твиттера
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.LJname">
            <summary>
            ник (ЖЖ)
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.EntityType.Hashtag">
            <summary>
            Хэштег
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Languages">
            <summary>
                Язык
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Languages.Russian">
            <summary>
                Русский
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Languages.English">
            <summary>
                Английский
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.SubSentenceType">
            <summary>
                Тип подпредложения
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.Unknown">
            <summary>
                тип отсутствует
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.Default">
            <summary>
                неопределенный тип
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.AdjunctPhrase">
            <summary>
                обстоятельственный оборот
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.ApproximatingForceps">
            <summary>
                часть текста в скобках
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.DanglingParticiple">
            <summary>
                деепричастный оборот
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.DirectSpeech">
            <summary>
                прямая речь/цитирование
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.EqualInRights">
            <summary>
                равноправное предложение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.Introductory">
            <summary>
                вводное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.NewSent">
            <summary>
                отдельное предложение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.Participial">
            <summary>
                причастный оборот
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.Slogan">
            <summary>
                лозунг
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.Subordinate">
            <summary>
                подчиненное предложение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.SubSentenceType.InnerSentence">
            <summary>
            Emulated subsentence based on sentence from subTextInfo
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.UnitTextType">
            <summary>
                Имя узла в xml
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.UnitTextType.CET">
            <summary>
                Вспомогательные сущности: предлог, наречие, предикатив
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.UnitTextType.ENTITY">
            <summary>
                Сущность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.UnitTextType.SENT">
            <summary>
                Предложение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.UnitTextType.SUB_SENT">
            <summary>
                Подпредложение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.UnitTextType.T">
            <summary>
                внутренний элемент сущностей
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.UnitTextType.TEXT">
            <summary>
                весь текст
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.UnitTextType.THEME">
            <summary>
                Подтема
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.UnitTextType.VERB">
            <summary>
                Формы глагола: глагол, причастие и деепричастие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.UnitTextType.U">
            <summary>
                Неразмеченный текст
            </summary>
        </member>
        <member name="T:Linguistics.Core.Extensions.ArrayExtensions">
            <summary>
            Contains extension methods that work with array
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.ArrayExtensions.IndexOf``1(``0[],``0)">
            <summary>
            Searches for <paramref name="obj"/> in <paramref name="source"/> and returns it's index if obj was found
            otherwise returns -1
            </summary>
            <typeparam name="T">type of objects in array</typeparam>
            <param name="source">array with objects</param>
            <param name="obj">object that should be found in <paramref name="source"/></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ArrayExtensions.ExistingListFirstOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
                Метод принимает коллекцию, предполагается заранее что объект коллекции не пуст (!null)
                и возвращает первый элемент коллекции или null если коллекция пуста
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ArrayExtensions.TheFirstOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
                Метод принимает коллекцию
                и возвращает первый элемент коллекции или null если коллекция пуста или был передан null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ArrayExtensions.TheFirst``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Метод принимает коллекцию
                и возвращает первый элемент коллекции подходящий под условие
                <remarks>Метод не производит никаких проверок при работе</remarks>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="predicate">предикат определяющий условие для вывода результата</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ArrayExtensions.TheFirstOrDefaultOfType``2(System.Collections.Generic.IList{``0})">
            <summary>
                Метод возвращает первый элемент заданного типа из коллекции или null если такой элемент найден не был
            </summary>
            <typeparam name="T1">тип элемента в коллекции</typeparam>
            <typeparam name="T2">тип элемента, который нужно найти</typeparam>
            <param name="list">список в котором будет искаться элемент</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ArrayExtensions.ExistingListLast``1(System.Collections.Generic.IList{``0})">
            <summary>
                Метод принимает коллекцию
                и возвращает последний элемент коллекции
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ArrayExtensions.IfAny``1(System.Collections.Generic.IList{``0})">
            <summary>
                Проверяет что в списке есть элементы
            </summary>
            <typeparam name="T">тип объекта списка</typeparam>
            <param name="list">список для проверки</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ArrayExtensions.IfAny``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
                Метод принимает коллекцию
                и производит проверку на выполнение условия хотя бы на каком-либо элементе коллекции
                <remarks>Метод не производит никаких проверок при работе</remarks>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ArrayExtensions.OfTheType``1(System.Collections.IList)">
            <summary>
                Метод возвращает только те элементы коллекции которые соответствуют запрошенному типу
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.Extensions.ArrayExtensions.MultiSelector`2">
            <summary>
            Selects single object from list
            </summary>
            <param name="source">source of objects</param>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Linguistics.Core.Extensions.CharExtensions">
            <summary>
            Contains extension methods for System.Char type
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.CharExtensions.IsEqualCode(System.Char,System.Object)">
            <summary>
            Проверяет совпадение первых букв
            </summary>
            <param name="symbol"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.CharExtensions.IsLowerLetter(System.Char)">
            <summary>
            Проверка, что символ - буква в нижнем регистре
            </summary>
            <param name="ch">символ</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.CharExtensions.IsDefault(System.Char)">
            <summary>
            Проверяет символ на совпадение с умолчательным
            </summary>
            <param name="ch">символ</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.CharExtensions.EqualsAny(System.Char,System.Char[])">
            <summary>
            Проверяет совпадение символа с одним из указанного массива
            </summary>
            <param name="ch">символ</param>
            <param name="anyOf">массив символов для проверки</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.CharExtensions.IsDash(System.Char)">
            <summary>
            Проверяет символ на один из вариантов представления тире
            </summary>
            <param name="ch">символ</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.CharExtensions.IsOpenQuote(System.Char)">
            <summary>
            Checks that <paramref name="symbol"/> is open quote symbol
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.CharExtensions.IsCloseQuote(System.Char)">
            <summary>
            Checks that <paramref name="symbol"/> is open quote symbol
            </summary>
        </member>
        <member name="T:Linguistics.Core.Extensions.Converter">
            <summary>
            Конвертер
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.Converter.ToString(System.Int32)">
            <summary>
            Преобразование в строку
            </summary>
            <param name="value">значение</param>
            <returns>строковый эквивалент</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Converter.ToString(System.UInt32)">
            <summary>
            Преобразование в строку
            </summary>
            <param name="value">значение</param>
            <returns>строковый эквивалент</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Converter.ToXName(System.String)">
            <summary>
            Преобразование в XName
            </summary>
            <param name="value">строка</param>
            <returns>преобразованное значение</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Converter.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Преобразование в список
            </summary>
            <typeparam name="T">тип списка</typeparam>
            <param name="collection">коллекция</param>
            <returns>список</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.Converter.UpdateOffset(System.Collections.Generic.List{System.Int32}@,System.Int32,System.Int32)">
            <summary>
            Обновление сдвига
            </summary>
            <param name="offsets"></param>
            <param name="index"></param>
            <param name="newValue"></param>
        </member>
        <member name="T:Linguistics.Core.Extensions.ExtensionMethods">
            <summary>
            extension methods
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.IsNull(System.Object)">
            <summary>
            Returns true if object is not null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.IsNotNull(System.Object)">
            <summary>
            Returns true if object is null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.ThrowIfEmptyOrNull(System.String,System.String)">
            <summary>
            Throws <exception cref="T:System.ArgumentNullException"></exception> if text is empty or null
            </summary>
            <param name="text"></param>
            <param name="argName"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws <exception cref="T:System.ArgumentNullException"></exception> if <paramref name="obj"/> is null
            </summary>
            <param name="obj"></param>
            <param name="argName"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.VerifyIsNotNull``1(``0,System.String)">
            <summary>
            Throws <exception cref="T:System.InvalidOperationException"></exception> if <paramref name="obj"/> is null
            </summary>
            <param name="obj"></param>
            <param name="exceptionMessage"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.VerifyIsNotNull``1(``0,System.String,System.Object[])">
            <summary>
            Throws <exception cref="T:System.InvalidOperationException"></exception> if <paramref name="obj"/> is null
            </summary>
            <param name="obj"></param>
            <param name="formatString"></param>
            <param name="objects"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.RepeatOnce``1(``0)">
            <summary>
            TODO comment
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.TryParseInt(System.String)">
            <summary>
            Tries to parse int value from string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.ParseInt(System.String,System.Int32)">
            <summary>
            Tries to parse int value from string
            </summary>
            <param name="value"></param>
            <param name="fallBackValue"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.TryParseBool(System.String)">
            <summary>
            Tries to parse bool value from string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.ReplaceWordsEndingWithStar(System.String)">
            <summary>
            Replaces word's 2 ending vowels (or combination of palliating sign + vowel) with '*' symbol
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.ContainsSignOfPunctuation(System.String)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.TrimEndSignOfPunctuation(System.String)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.SearchForSubsequence(System.String[],System.String[])">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.ContainsAny``1(System.Collections.Generic.HashSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.ExtensionMethods.GetPositionInParent(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="T:Linguistics.Core.Extensions.RelationsExtensions">
            <summary>
            Extensions for IRelation interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.RelationsExtensions.SetRelations``2(System.Collections.Generic.IEnumerable{Linguistics.Core.Interfaces.Text.IRelations{``0,``1}},``1)">
            <summary>
                Установка связей в заданной коллекции
            </summary>
            <param name="collection">коллекция</param>
            <param name="parent">родитель</param>
        </member>
        <member name="M:Linguistics.Core.Extensions.RelationsExtensions.SetRelation``2(Linguistics.Core.Interfaces.Text.IRelations{``0,``1},Linguistics.Core.Interfaces.Text.IRelations{``0,``1})">
            <summary>
                Установка связи между двумя соседними элементами
            </summary>
            <param name="current">текущий элемент</param>
            <param name="previous">предыдущий элемент</param>
        </member>
        <member name="T:Linguistics.Core.Extensions.StringExtensions">
            <summary>
            Расширения для string
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetPreviousNotEmpty(System.String,System.Int32)">
            <summary>
            Получение непустого предыдущего символа
            </summary>
            <param name="str">строка</param>
            <param name="currentIndex">индекс текущего символа</param>
            <returns>непустой предыдущий символ</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetNextNotEmpty(System.String,System.Int32)">
            <summary>
            Получение непустого следующего символа
            </summary>
            <param name="str">строка</param>
            <param name="currentIndex">индекс текущего символа</param>
            <returns>непустой следующий символ</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.CharOrDefault(System.String,System.Int32)">
            <summary>
            Получение символа или значения по умолчания по заданному индексу в строке
            </summary>
            <param name="str">строка</param>
            <param name="charIndex">индекс символа</param>
            <returns>символ или значение по умолчанию</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetFirstWord(System.String)">
            <summary>
            Получение первого слова (не слова будут пропущены)
            </summary>
            <param name="text">текст</param>
            <returns>первое слово</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetFirstWords(System.String,System.Int32)">
            <summary>
            Получение заданного количества первых слов
            </summary>
            <param name="text">текст</param>
            <param name="count">количество слов</param>
            <returns>первые слова</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetLastWord(System.String)">
            <summary>
            Получение последнего слова (не слова будут пропущены)
            </summary>
            <param name="text">текст</param>
            <returns>последнее слово</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetLastWords(System.String,System.Int32)">
            <summary>
            Получение заданного количества последних слов
            </summary>
            <param name="text">текст</param>
            <param name="count">количество слов</param>
            <returns>последние слова</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetWords(System.String)">
            <summary>
            Получение слов из текста
            </summary>
            <param name="text">текст</param>
            <returns>слова</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetWordBeforeCurrentPosition(System.String,System.Int32,System.Boolean)">
            <summary>
            Получение слова, стоящего непосредственно перед заданной позицией (с пропуском пробелов)
            </summary>
            <param name="text">строка</param>
            <param name="positionIndex">индекс позиции</param>
            <param name="isWithDigits">флаг, что слово может содержать цифры</param>
            <returns>слово, стоящее непосредственно перед заданной позицией</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetWordAfterCurrentPosition(System.String,System.Int32,System.Boolean)">
            <summary>
            Получение слова, стоящего непосредственно после заданной позиции (с пропуском пробелов)
            </summary>
            <param name="text">строка</param>
            <param name="positionIndex">индекс позиции</param>
            <param name="isWithDigits">флаг, что слово может содержать цифры</param>
            <returns>слово, стоящее непосредственно после заданной позиции</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetPreviousTextToSpace(System.String,System.Int32)">
            <summary>
            Получение текста, стоящего перед текущим словом, до ближайшего пробела
            </summary>
            <param name="text">строка</param>
            <param name="positionIndex">индекс позиции</param>
            <returns>текст, стоящий перед текущим словом</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetPreviousChar(System.String,System.Int32)">
            <summary>
            Получение предыдущего символа для указанного индекса
            </summary>
            <param name="text">строка</param>
            <param name="index">индекс</param>
            <returns>предыдущий сисвол</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetPreviousCharAfterSpace(System.String,System.Int32)">
            <summary>
            Получение предыдущего символа (с пропуском пробелов) для указанного индекса
            </summary>
            <param name="text">строка</param>
            <param name="index">индекс</param>
            <returns>предыдущий символ</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetNextChar(System.String,System.Int32)">
            <summary>
            Получение следующего символа для указанного индекса
            </summary>
            <param name="text">строка</param>
            <param name="index">индекс</param>
            <returns>следующий сисвол</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetNextCharAfterSpace(System.String,System.Int32)">
            <summary>
            Получение следующего символа (с пропуском пробелов) для указанного индекса
            </summary>
            <param name="text">строка</param>
            <param name="index">индекс</param>
            <returns>следующий символ</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetNextCharAfterSpace(System.String,System.Int32,System.Int32@)">
            <summary>
            Получение следующего символа (с пропуском пробелов) для указанного индекса
            </summary>
            <param name="text">строка</param>
            <param name="index">индекс</param>
            <param name="resultIndex">индекс найденного символа</param>
            <returns>следующий символ</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.IsIncaseEqual(System.String,System.String)">
            <summary>
                Проверка эквивалентности двух строк без учета регистра
            </summary>
            <param name="first">первая строка</param>
            <param name="second">вторая строка</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetIncaseValue(System.String)">
            <summary>
                Получение строки без учета регистра
            </summary>
            <param name="str">строка</param>
            <returns>строка без регистра</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.TrimAndLowerWithoutSpaces(System.String)">
            <summary>
            Метод получает усеченную подстроку приведенную к нижнему регистру
            </summary>
            <param name="str">строка</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.TrimAndLower(System.String)">
            <summary>
            Gets trimmed and lowered string
            </summary>
            <param name="str">строка</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.IsEmptyText(System.String)">
            <summary>
            Проверка, что в заданной строке нет текста (только пробелы)
            </summary>
            <param name="str">строка</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.IsEmpty(System.String)">
            <summary>
            Проверка, что в заданной строке нет текста (только пробелы)
            </summary>
            <param name="str">строка</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.IsDash(System.String)">
            <summary>
            Checks that <paramref name="str"/> is dash-styled string or hyphen
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.IsEmptyOrNull(System.String)">
            <summary>
            Checks that string is null or empty
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.InSingleQuote(System.String)">
            <summary>
            Wraps input string into single quotes
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.InRoundBrackets(System.String)">
            <summary>
            Returns text wrapped into round brackets
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.FormatStr(System.String,System.Object[])">
            <summary>
            Returs formatted string
            </summary>
            <param name="formatText"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.SplitBySpace(System.String)">
            <summary>
            Splits string by space and removes empty entries
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.SplitByTabulation(System.String)">
            <summary>
            Splits string by '\t' and removes empty entries
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.SplitByComma(System.String)">
            <summary>
            Splits string by ',' and removes empty entries
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.SplitBy(System.String,System.Char)">
            <summary>
            Splits string by defined symbol and removes empty entries
            </summary>
            <param name="value"></param>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.ToLowerStr(System.String)">
            <summary>
            Changes case of string to lower one
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.TrimWhiteSpaces(System.String)">
            <summary>
            Trims ' ', '\r', '\n', '\t' symbols
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.RemoveSingleQuote(System.String)">
            <summary>
            Removes all single quotes from text
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.JoinBySpace(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Joins collection of values using Space as separator
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.JoinBy(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins collection of values using defined string as separator
            </summary>
            <param name="values"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetFirstWord(System.String,System.Int32)">
            <summary>
            Получение первого слова
            </summary>
            <param name="text">текст</param>
            <param name="startIndex">стартовая позиция для поиска</param>
            <returns>первое слово</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringExtensions.GetLastWord(System.String,System.Int32)">
            <summary>
            Получение последнего слова
            </summary>
            <param name="text">текст</param>
            <param name="startIndex">стартовая позиция для поиска</param>
            <returns>последнее слово</returns>
        </member>
        <member name="T:Linguistics.Core.Extensions.StringBuilderExtensions">
            <summary>
            Contains StringBuilder extensions
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringBuilderExtensions.GetPreviousNotEmpty(System.Text.StringBuilder,System.Int32)">
            <summary>
            Получение непустого предыдущего символа
            </summary>
            <param name="str">строка</param>
            <param name="currentIndex">индекс текущего символа</param>
            <returns>непустой предыдущий символ</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringBuilderExtensions.GetNextNotEmpty(System.Text.StringBuilder,System.Int32)">
            <summary>
            Получение непустого следующего символа
            </summary>
            <param name="str">строка</param>
            <param name="currentIndex">индекс текущего символа</param>
            <returns>непустой следующий символ</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringBuilderExtensions.CharOrDefault(System.Text.StringBuilder,System.Int32)">
            <summary>
            Получение символа или значения по умолчания по заданному индексу в строке
            </summary>
            <param name="str">строка</param>
            <param name="charIndex">индекс символа</param>
            <returns>символ или значение по умолчанию</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringBuilderExtensions.LastIndexOfAny(System.Text.StringBuilder,System.Collections.Generic.HashSet{System.Char},System.Int32)">
            <summary>
            Searches for specific symbols starting from the end of the <paramref name="content"/>
            </summary>
            <param name="content">builder with content</param>
            <param name="whatToSearchFor">array of symbols one of which should be found</param>
            <param name="startIndex">index from which search </param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.StringBuilderExtensions.IsEmpty(System.Text.StringBuilder)">
            <summary>
                Проверка на пустоту
            </summary>
            <param name="builder">строка</param>
            <returns>результат проверки</returns>
        </member>
        <member name="T:Linguistics.Core.Extensions.XmlExtensions">
            <summary>
            Contains Xml extension methods
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetCData(System.String)">
            <summary>
                Получение блока CDATA из заданного текста
            </summary>
            <param name="text">текст</param>
            <returns>блок CDATA</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsTag(System.Xml.Linq.XElement,Linguistics.Core.Enums.UnitTextType)">
            <summary>
                Проверка, что у xml-узел имеет заданный тип
            </summary>
            <param name="element">xml-узел</param>
            <param name="type">тип узла</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetStartPosition(System.Xml.Linq.XElement)">
            <summary>
                Получение из xml значения атрибута начальной позиции
            </summary>
            <param name="element">xml-узел</param>
            <returns>начальная позиция</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeValueNotNull(System.Xml.Linq.XElement,System.String)">
            <summary>
                Получение значения атрибута
            </summary>
            <param name="element">xml-узел</param>
            <param name="attributeName">имя атрибута</param>
            <returns>значение атрибута</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeValue(System.Xml.Linq.XElement,System.String)">
            <summary>
                Получение значения атрибута
            </summary>
            <param name="element">xml-узел</param>
            <param name="attributeName">имя атрибута</param>
            <returns>значение атрибута</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.ContainsAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
                Проверка наличия атрибута
            </summary>
            <param name="element">xml-узел</param>
            <param name="attributeName">имя атрибута</param>
            <returns>результат проверки</returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.TryGetAttributeValue(System.Xml.Linq.XElement,System.String,System.String@)">
            <summary>
            Tries to get attribute value
            </summary>
            <param name="element"></param>
            <param name="attribute"></param>
            <param name="attributeValue"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.AttributeNonNullValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Получить значение атрибута
            </summary>
            <param name="element"></param>
            <param name="attributeName">имя атрибута</param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.AttributeNullableValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns element attribute value
            </summary>
            <param name="element"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetAttribute(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Sets element attribute value
            </summary>
            <param name="element"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetElementType(System.Xml.Linq.XElement,Linguistics.Core.Enums.TypeValues)">
            <summary>
            Sets element TYPE attribute value
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetElementId(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Sets element ID attribute value
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetElementSubj(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Sets element ID attribute value
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetEntityValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Sets element ID attribute value
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetElementValueCore(System.Xml.Linq.XElement,System.String)">
            <summary>
            Sets element ID attribute value
            </summary>
            <param name="element"></param>
            <param name="value"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementU(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is U
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementT(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is T
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementCET(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is CET
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementUorCET(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is U or CET
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementENTITY(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is ENTITY
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementVERB(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is VERB
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementTHEME(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is THEME
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementTEXT(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is THEME
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementENTITIES(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is ENTITIES
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementSENT(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is SENT
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsElementSUBSENT(System.Xml.Linq.XElement)">
            <summary>
            Checks that element is SUBSENT
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeVALUE(System.Xml.Linq.XElement)">
            <summary>
            Retursn element VALUE attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeVALUENotNull(System.Xml.Linq.XElement)">
            <summary>
            Retursn element VALUE attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributePRENotNull(System.Xml.Linq.XElement)">
            <summary>
            Returns PRE attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributePROF(System.Xml.Linq.XElement)">
            <summary>
            Returns PROF attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributePROFNotNull(System.Xml.Linq.XElement)">
            <summary>
            Returns PROF attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeADJ(System.Xml.Linq.XElement)">
            <summary>
            Returns ADJ attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeADJNotNull(System.Xml.Linq.XElement)">
            <summary>
            Returns ADJ attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.TryGetAttributeID(System.Xml.Linq.XElement)">
            <summary>
            Returns ID Attribute Value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeID(System.Xml.Linq.XElement)">
            <summary>
            Returns element ID attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.TryGetAttributeLINK(System.Xml.Linq.XElement)">
            <summary>
            Returns LINK Attribute Value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeLINK(System.Xml.Linq.XElement)">
            <summary>
            Returns element Link attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.TryGetAttributeSubj(System.Xml.Linq.XElement)">
            <summary>
            Returns LINK Attribute Value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeSubj(System.Xml.Linq.XElement)">
            <summary>
            Returns element Link attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeMI(System.Xml.Linq.XElement)">
            <summary>
            Returns MI Attribute Value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeMINotNull(System.Xml.Linq.XElement)">
            <summary>
            Returns MI Attribute Value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeFULLNAME(System.Xml.Linq.XElement)">
            <summary>
            Returns FULLNAME Attribute Value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeFULLNAMENotNull(System.Xml.Linq.XElement)">
            <summary>
            Returns FULLNAME Attribute Value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetFullValue(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.RemoveAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            Removes attribute from XElement
            </summary>
            <param name="element"></param>
            <param name="attrname"></param>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeFRTFINAL(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetAttributeSNT(System.Xml.Linq.XElement,Linguistics.Core.Tonality.TonalityType)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetAttributeFRT(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.MarkAsInquiry(System.Xml.Linq.XElement,Linguistics.TextMining.ObjectAllocateMethod)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.ToXDocument(System.String)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsTypeInquiry(System.Xml.Linq.XElement)">
            <summary>
            Indicates that entity has type Inquiry
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeAsROLE(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns attribute's value casted to role typed
            </summary>
            <param name="element"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeROLE(System.Xml.Linq.XElement)">
            <summary>
            Returns ROLE attribute values
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeROLENotNull(System.Xml.Linq.XElement)">
            <summary>
            Returns Role attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeAsTYPE(System.Xml.Linq.XElement,System.String)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeTYPE(System.Xml.Linq.XElement)">
            <summary>
            Returns element Type attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.AttributeAsType(System.Xml.Linq.XElement)">
            <summary>
            Returns element Type attribute value
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.AttributeAsType(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns element Type attribute value
            </summary>
            <param name="element"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.AttributeAsSentiment(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns element Type attribute value
            </summary>
            <param name="element"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.AttributeAsVerb(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns element Type attribute value
            </summary>
            <param name="element"></param>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.AttributeAsAdverb(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns element Type attribute value
            </summary>
            <param name="element"></param>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.AttributeAsNoun(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns element Type attribute value
            </summary>
            <param name="element"></param>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.AttributeAsAdjective(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns element Type attribute value
            </summary>
            <param name="element"></param>
            <param name="attr"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.HasType(System.Xml.Linq.XElement,Linguistics.Core.Enums.TypeValues)">
            <summary>
            Checks that element has defined type attribute
            </summary>
            <param name="element"></param>
            <param name="typeToCheck"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeTYPESAVED(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetAttributeTYPESAVEDorTYPE(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetAttributeROLE(System.Xml.Linq.XElement,System.Nullable{Linguistics.Core.Enums.RoleValues})">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetAttributeTYPE(System.Xml.Linq.XElement,Linguistics.Core.Enums.TypeValues)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetAttributeTYPESAVED(System.Xml.Linq.XElement,Linguistics.Core.Enums.TypeValues)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.SetAttributeID(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.ThrowIfNotSent(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.ThrowIfNotSubsent(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.FullXPath(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetSingleNode(System.Xml.Linq.XElement,System.String)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.DescendantsEntity(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.DescendantsSubsentences(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.ElementsExceptT(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.DescendantsExceptT(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.HasAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.HasAttributeWithValue(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.FindEntityById(System.Xml.Linq.XContainer,System.Int32)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.IsLinguisticsCompability(Linguistics.Core.Enums.TypeValues)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetVALUE(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetVALUETHEMEorVALUE(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.Extensions.XmlExtensions.GetVALUETHEME(System.Xml.Linq.XElement)">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="T:Linguistics.Core.Extensions.XmlExtensions.Consts">
            <summary>
            Constants
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.XmlExtensions.Consts.ISSUBJECT_ATTRIBUTE">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.XmlExtensions.Consts.ISOBJECT_ATTRIBUTE">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.XmlExtensions.Consts.INDIRECTSPEECH_BEGIN_ATTRIBUTE">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.XmlExtensions.Consts.INDIRECTSPEECH_END_ATTRIBUTE">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.XmlExtensions.Consts.DIRECTSPEECH_BEGIN_ATTRIBUTE">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.XmlExtensions.Consts.DIRECTSPEECH_END_ATTRIBUTE">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Extensions.XmlExtensions.Consts.SKIP_SENT_ELEMENT">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.MorphoInfoIndexes">
            <summary>
            Contains Morpho features indexes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoInfoIndexes.Case">
            <summary>
                падеж
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoInfoIndexes.Gender">
            <summary>
                род
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoInfoIndexes.Number">
            <summary>
                число
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoInfoIndexes.Animation">
            <summary>
                одушевленность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoInfoIndexes.Transitional">
            <summary>
                переходность глагола
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoInfoIndexes.Face">
            <summary>
                лицо
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoInfoIndexes.Voice">
            <summary>
                залог
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.MorphoInfoIndexes.Time">
            <summary>
                залог
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Morphology.MorphoInformation">
            <summary>
                Класс морфологической информации сущности
            </summary>
        </member>
        <member name="F:Linguistics.Core.Interfaces.Morphology.MorphoInformation.MISeparator">
            <summary>
            разделитель морфологической информации
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.SetCaseFromCode(System.Char)">
            <summary>
                задать падеж из заданного кода
            </summary>
            <param name="code">код падежа</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.SetGenderFromCode(System.Char)">
            <summary>
                задать род из заданного кода
            </summary>
            <param name="code">код рода</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.SetNumberFromCode(System.Char)">
            <summary>
                задать число из заданного кода
            </summary>
            <param name="code">код числа</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.SetAnimationFromCode(System.Char)">
            <summary>
                задать одушевленность из заданного кода
            </summary>
            <param name="code">код одушевленности</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.SetTransitionalFromCode(System.Char)">
            <summary>
                задать переходность из заданного кода
            </summary>
            <param name="code">код переходности</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.SetFaceFromCode(System.Char)">
            <summary>
                задать лицо из заданного кода
            </summary>
            <param name="code">код лица</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.SetVoiceFromCode(System.Char)">
            <summary>
                задать залог из заданного кода
            </summary>
            <param name="code">код залога</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.SetTimeFromCode(System.Char)">
            <summary>
                задать время из заданного кода
            </summary>
            <param name="code">код залога</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.GetCode(Linguistics.Core.Enums.Morphology.CaseType)">
            <summary>
                Получение кода для значения свойства
            </summary>
            <returns>код значения свойства</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.GetCode(Linguistics.Core.Enums.Morphology.GenderType)">
            <summary>
                Получение кода для значения свойства
            </summary>
            <returns>код значения свойства</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.GetCode(Linguistics.Core.Enums.Morphology.NumberType)">
            <summary>
                Получение кода для значения свойства
            </summary>
            <returns>код значения свойства</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.GetCode(Linguistics.Core.Enums.Morphology.AnimationType)">
            <summary>
                Получение кода для значения свойства
            </summary>
            <returns>код значения свойства</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.GetCode(Linguistics.Core.Enums.Morphology.VoiceType)">
            <summary>
                Получение кода для значения свойства
            </summary>
            <returns>код значения свойства</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.GetCode(Linguistics.Core.Enums.Morphology.PersonType)">
            <summary>
                Получение кода для значения свойства
            </summary>
            <returns>код значения свойства</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.GetCode(Linguistics.Core.Enums.Morphology.TransitionalType)">
            <summary>
                Получение кода для значения свойства
            </summary>
            <returns>код значения свойства</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.Equals(Linguistics.Core.Interfaces.Morphology.MorphoInformation)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.CopyTo(Linguistics.Core.Interfaces.Morphology.MorphoFeature)">
            <summary>
            Copies morpho information to morpho feature
            </summary>
            <param name="featureWhereToCopy"></param>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.op_Equality(Linguistics.Core.Interfaces.Morphology.MorphoInformation,Linguistics.Core.Interfaces.Morphology.MorphoInformation)">
            <summary>
            Compares two morphoinformations
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.op_Inequality(Linguistics.Core.Interfaces.Morphology.MorphoInformation,Linguistics.Core.Interfaces.Morphology.MorphoInformation)">
            <summary>
            Compares two morphoinformations
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Morphology.MorphoInformation.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.NegativeType">
            <summary>
            Тип отрицания
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NegativeType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NegativeType.NotNegation">
            <summary>
            Не отрицание
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NegativeType.Negation">
            <summary>
            Отрицание
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.NumberType">
            <summary>
            Число
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NumberType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NumberType.Single">
            <summary>
            Единственное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NumberType.Plural">
            <summary>
            Множественное
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.NumericType">
            <summary>
            Тип числительного
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NumericType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NumericType.Count">
            <summary>
            Количественный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NumericType.Collection">
            <summary>
            Собирательный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.NumericType.Ordering">
            <summary>
            Порядковый
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.OfficialType">
            <summary>
            Служебные части речи
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.Pretext">
            <summary>
            Предлог
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.Conjunction">
            <summary>
            Союз
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.Particle">
            <summary>
            Частица
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.Interjection">
            <summary>
            Междометие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.Predicative">
            <summary>
            Предикатив
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.Symbol">
            <summary>
            Символ
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.Determiners">
            <summary>
            Определитель
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.InfMarker">
            <summary>
            Инфинитивная частица to
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.ExistThere">
            <summary>
            There
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.OfficialType.VvodnoeSlovo">
            <summary>
            вводное слово
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.PartOfSpeechType">
            <summary>
            Часть речи
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PartOfSpeechType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PartOfSpeechType.Official">
            <summary>
            Служебная
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PartOfSpeechType.Verb">
            <summary>
            Глагол
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PartOfSpeechType.Noun">
            <summary>
            Существительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PartOfSpeechType.Adjective">
            <summary>
            Прилагательное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PartOfSpeechType.Numeric">
            <summary>
            Числительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PartOfSpeechType.Adverb">
            <summary>
            Наречие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PartOfSpeechType.Pronoun">
            <summary>
            Местоимение
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.PersonType">
            <summary>
            Лицо
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PersonType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PersonType.FirstFace">
            <summary>
            Первое
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PersonType.SecondFace">
            <summary>
            Второе
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PersonType.ThirdFace">
            <summary>
            Третье
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.PhaseVerbType">
            <summary>
            Фазисность глагола
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PhaseVerbType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PhaseVerbType.PhaseInf">
            <summary>
            Фазисно - зависимый инфинитив
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PhaseVerbType.PhaseAll">
            <summary>
            Фазисно - зависимый общий
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.PronounClass">
            <summary>
            Класс местоимения
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Individual">
            <summary>
            Личное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Returning">
            <summary>
            Возвратное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Possessive">
            <summary>
            Притяжательное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Indicative">
            <summary>
            Указательное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Interrogative">
            <summary>
            Вопросительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Negative">
            <summary>
            Отрицательное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Indefinative">
            <summary>
            Неопределенное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Relative">
            <summary>
            Относительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Definative">
            <summary>
            Определительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.InterrogativeRelative">
            <summary>
            Вопросительно - относительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Quantifying">
            <summary>
            Количественное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounClass.Reciprocal">
            <summary>
            Взаимное
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.PronounGroup">
            <summary>
            Группа местоимения
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounGroup.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounGroup.Noun">
            <summary>
            Существительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounGroup.Adjective">
            <summary>
            Прилагательное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.PronounGroup.Numeric">
            <summary>
            Числительное
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.SearchZone">
            <summary>
            Describes possible morphology search zones
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.SearchZone.FullAddNewWords">
            <summary>
            поиск во всех словарях, включая словарь новых слов, если слово отсутсвует, добавить в словарь новых слов
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.SearchZone.OnlySearch">
            <summary>
            только поиск во всех словарях, включая словарь новых слов, если слово отсутсвует, в словарь новых слов не добавлять
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.SearchZone.Abbreviation">
            <summary>
            только поиск в только словаре аббревиатур
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.SearchZone.BaseDictionary">
            <summary>
            поиск в виртуальных и дереве
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.SearchZone.NewWord">
            <summary>
            только поиск в словаре новых слов
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.SearchZone.BaseAndAbbreviation">
            <summary>
             Поиск в дереве, аббревиатурах и виртуальных
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.SearchZone.FullAddNewWordsCompound">
            <summary>
            поиск во всех словарях, включая словарь новых слов и определение составных слов, если слово отсутсвует, добавить в словарь новых слов
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.ShortType">
            <summary>
            Краткость
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.ShortType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.ShortType.Short">
            <summary>
            Краткое
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.TimeType">
            <summary>
            Время
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.TimeType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.TimeType.Present">
            <summary>
            Настоящее
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.TimeType.Past">
            <summary>
            Прошедшее
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.TimeType.Future">
            <summary>
            Будущее
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.TransitionalType">
            <summary>
            Переходность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.TransitionalType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.TransitionalType.Transitional">
            <summary>
            Переходное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.TransitionalType.NoTransitional">
            <summary>
            Непереходное
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.VerbAspectType">
            <summary>
            Вид
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbAspectType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbAspectType.Perfective">
            <summary>
            Совершенный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbAspectType.Imperfective">
            <summary>
            Несовершенный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbAspectType.PerfectiveImperfective">
            <summary>
            Двувидовой
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.VerbForm">
            <summary>
            Форма глагола
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbForm.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbForm.Participle">
            <summary>
            Причастие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbForm.Deepr">
            <summary>
            Деепричастие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbForm.Personal">
            <summary>
            Личная форма
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbForm.ImPersonal">
            <summary>
            Безличная форма
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbForm.Infinitive">
            <summary>
            Инфинитив
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbForm.Imperative">
            <summary>
            Императив
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbForm.ToInfinitive">
            <summary>
            Инфинитив с частицей to
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.VerbType">
            <summary>
            Глагол
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbType.Main">
            <summary>
            Главный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbType.Aux">
            <summary>
            Вспомогательный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VerbType.Mod">
            <summary>
            Модальный
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.Morphology.VoiceType">
            <summary>
            Залог
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VoiceType.Undefined">
            <summary>
            Значение не определено
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VoiceType.Passive">
            <summary>
            Страдательный
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.Morphology.VoiceType.Active">
            <summary>
            Действительный
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:Linguistics.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:Linguistics.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:Linguistics.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Linguistics.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:Linguistics.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:Linguistics.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:Linguistics.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:Linguistics.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:Linguistics.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:Linguistics.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:Linguistics.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Linguistics.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Linguistics.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Linguistics.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Linguistics.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:Linguistics.Annotations.MeansImplicitUseAttribute"/>
            or <see cref="T:Linguistics.Annotations.UsedImplicitlyAttribute"/>
            </summary>
        </member>
        <member name="F:Linguistics.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Linguistics.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Linguistics.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:Linguistics.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:Linguistics.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
        </member>
        <member name="T:Linguistics.Core.RegEx.EntityExpression">
            <summary>
            Класс для хранения информации о регулярном выражении для сущности
            </summary>
        </member>
        <member name="M:Linguistics.Core.RegEx.EntityExpression.#ctor">
            <summary>
            Creates new empty entity expression
            </summary>
        </member>
        <member name="M:Linguistics.Core.RegEx.EntityExpression.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates new entity expression based on <paramref name="expression"/>
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:Linguistics.Core.RegEx.EntityExpression.SaveRegex(System.String)">
            <summary>
            Сохранение регулярного выражения
            </summary>
        </member>
        <member name="P:Linguistics.Core.RegEx.EntityExpression.Expression">
            <summary>
            Строка регулярного выражения
            </summary>
        </member>
        <member name="P:Linguistics.Core.RegEx.EntityExpression.RegularExpression">
            <summary>
            Регулярное выражение
            </summary>
        </member>
        <member name="P:Linguistics.Core.RegEx.EntityExpression.UsedExpressions">
            <summary>
            Используемые регулярные выражения
            </summary>
        </member>
        <member name="P:Linguistics.Core.RegEx.EntityExpression.SelectionType">
            <summary>
            Тип выделения
            </summary>
        </member>
        <member name="P:Linguistics.Core.RegEx.EntityExpression.EntityType">
            <summary>
            Тип сущности
            </summary>
        </member>
        <member name="T:Linguistics.Core.RegEx.RegexHelper">
            <summary>
                Класс для помощи в работе с регулярными выражениями
            </summary>
        </member>
        <member name="M:Linguistics.Core.RegEx.RegexHelper.GetVariantsFromCollection(System.Collections.Generic.IEnumerable{System.String},Linguistics.Core.RegEx.RegexHelper.StringToRegexConverter)">
            <summary>
                Получение регулярного выражения (список вариантов) для заданной коллекции
            </summary>
            <param name="collection">коллекция строк</param>
            <param name="converter">конвертер для преобразования каждого элемента коллекции</param>
            <returns>регулярное выражение</returns>
        </member>
        <member name="M:Linguistics.Core.RegEx.RegexHelper.GetSimpleVariantsFromCollection(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Получение регулярного выражения (список вариантов) для заданной коллекции без преобразований
            </summary>
            <param name="collection">коллекция строк</param>
            <returns>регулярное выражение</returns>
        </member>
        <member name="M:Linguistics.Core.RegEx.RegexHelper.GetVariantsFromSortedCollection(System.Collections.Generic.List{System.String},Linguistics.Core.RegEx.RegexHelper.StringToRegexConverter,System.Boolean)">
            <summary>
                Получение регулярного выражения (список вариантов) для заданной отсортированной коллекции
            </summary>
            <param name="sortedCollection">отсортированная коллекция строк</param>
            <param name="converter">конвертер для преобразования каждого элемента коллекции</param>
            <param name="isAsIs">флаг использования исходной строки без преобразований</param>
            <returns>регулярное выражение</returns>
        </member>
        <member name="M:Linguistics.Core.RegEx.RegexHelper.GetSortedCollection(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IComparer{System.String})">
            <summary>
                Получение из исходной коллекции отсортированной с помощью указанного компаратора
            </summary>
            <param name="collection">исходная коллекция</param>
            <param name="comparer">компаратор</param>
            <returns>отсортированная коллекция</returns>
        </member>
        <member name="M:Linguistics.Core.RegEx.RegexHelper.ConvertStringForRegex(System.String)">
            <summary>
                Конвертирование строки для использования в регулярном выражении
            </summary>
            <param name="str">строка</param>
            <returns>сконвертированная строка</returns>
        </member>
        <member name="M:Linguistics.Core.RegEx.RegexHelper.IsSpecialSymbol(System.Char)">
            <summary>
            Indicates that character is regular expression special character
            </summary>
            <param name="symbol">input character</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.RegEx.RegexHelper.StringToRegexConverter">
            <summary>
            string to regex converted delegate
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.Core.RegEx.RegexHelper.StringsLengthComparer">
            <summary>
            Компаратор
            </summary>
        </member>
        <member name="T:Linguistics.Core.RegEx.SelectionType">
            <summary>
            Тип выделения простой сущности
            </summary>
        </member>
        <member name="F:Linguistics.Core.RegEx.SelectionType.True">
            <summary>
            Всегда выделять
            </summary>
        </member>
        <member name="F:Linguistics.Core.RegEx.SelectionType.False">
            <summary>
            Никогда не выделять
            </summary>
        </member>
        <member name="F:Linguistics.Core.RegEx.SelectionType.Child">
            <summary>
            Выделять только в качестве дочерней сущности
            </summary>
        </member>
        <member name="T:Linguistics.Core.Modules.ServiceFunction">
            <summary>
                класс с служебными функциями
            </summary>
        </member>
        <member name="F:Linguistics.Core.Modules.ServiceFunction.IsInProcessing">
            <summary>
                атрибут процесса обработки элемента
            </summary>
        </member>
        <member name="F:Linguistics.Core.Modules.ServiceFunction.HomogeneousConjunction">
            <summary>
                союзы, по которым могут быть соединены однородные члены
            </summary>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.CorrectXml(System.String,System.String)">
            <summary>
                Замена запрещенных символов на их код в xml-тексте
            </summary>
            <param name="result">xml-текст</param>
            <param name="sourceText"></param>
            <returns>отрекдактированный xml</returns>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.NormalizeValue(System.Xml.Linq.XElement@)">
            <summary>
                Нормализация значения VALUE сущностей
            </summary>
            <param name="xmlElement"></param>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.NormalizeEntityValue(System.String)">
            <summary>
            Нормализация значения сущности
            </summary>
            <param name="value">значение сущности</param>
            <returns>нормализованное значение сущности</returns>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.ReplaceWrongSymbols(System.String)">
            <summary>
            Removes incorrect symbols from xml and replaces them with correct analogs
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.RenumberID(System.Xml.Linq.XElement@)">
            <summary>
                Перенумерация ID
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.GetThemeName(System.Xml.Linq.XElement)">
            <summary>
            Returns entity's theme value
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.GetSubject(Linguistics.ServiceInterfaces.DataContracts.Digest.SubjectEntity)">
            <summary>
            Creates essence from subject entity
            </summary>
            <param name="subject"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.GetObject(Linguistics.ServiceInterfaces.DataContracts.Digest.ObjectEntity)">
            <summary>
            Creates object essence from object entity
            </summary>
            <param name="objectEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.GetSubjectAnaphoriaTuple(Linguistics.Core.OpinionMining.SubjectAndAnaphoriaTuple)">
            <summary>
            Parses anaphoria tuple into next-level object representation
            </summary>
            <param name="tuple"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.CreateElement_U(System.String,System.Int32,System.Int32)">
            <summary>
            Создать элемент U
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.CreateElementValue(System.String)">
            <summary>
            Создать значение элемента
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.SentenceRenumberID(System.Xml.Linq.XElement,Linguistics.Core.Modules.ServiceFunction.RenumberingContext,System.Boolean)">
            <summary>
                Перенумерация ID в предложении
            </summary>
            <param name="sentence"></param>
            <param name="context"></param>
            <param name="isTop"></param>
        </member>
        <member name="M:Linguistics.Core.Modules.ServiceFunction.DeleteAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
                Удаляет атрибут
            </summary>
            <param name="element"></param>
            <param name="attribute">имя атрибута</param>
        </member>
        <member name="T:Linguistics.Core.Modules.ServiceFunction.RenumberingContext">
            <summary>
                ID renumbering context class
            </summary>
        </member>
        <member name="P:Linguistics.Core.Modules.ServiceFunction.RenumberingContext.EntityID">
            <summary>
                идентификатор сущности
            </summary>
        </member>
        <member name="P:Linguistics.Core.Modules.ServiceFunction.RenumberingContext.SubSentID">
            <summary>
                идентификатор подпредложения
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.TextProcessing.ILinguisticsController">
            <summary>
            Linguistics controller interface
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.TextProcessing.ILinguisticsController.GetThemeList(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Returns list of themes in rdf
            </summary>
            <param name="rdf">input rdf</param>
            <param name="generateAllSubthemes">flag indicates whenever subthemes should be presented in semantic netwok</param>
            <returns></returns>
        </member>
        <member name="T:Linguistics.TextMining.Adjectives">
            <summary>
            adjectives sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Adjectives.adjNeut">
            <summary>
            neutral
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Adjectives.adjNeg">
            <summary>
            negative
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Adjectives.adjPos">
            <summary>
            positive
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Adjectives.adjAmplf">
            <summary>
            amplificator
            </summary>
        </member>
        <member name="T:Linguistics.TextMining.Adverbs">
            <summary>
            Adverb sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Adverbs.advNeut">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Adverbs.advNeg">
            <summary>
            negative
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Adverbs.advPos">
            <summary>
            positive
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Adverbs.advAmplf">
            <summary>
            amplificator
            </summary>
        </member>
        <member name="T:Linguistics.TextMining.Collocations">
            <summary>
            Types of collocation's sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Collocations.collNeut">
            <summary>
            Collocation that doesn't express any sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Collocations.collNeg">
            <summary>
            Collocation that expresses negative sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Collocations.collPos">
            <summary>
            Collocation that expresses positive sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Collocations.collAmplf">
            <summary>
            Collocation that amplifies existing sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Collocations.collvNeg">
            <summary>
            Verbal-collocation that expresses negative sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Collocations.collvPos">
            <summary>
            Verbal-collocation that expresses positive sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Collocations.collvNeut">
            <summary>
            Verbal-collocation that doesn't express any sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Collocations.collvObjNeg">
            <summary>
            Collocation that expresses negative sentiment towards object
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Collocations.collvObjPos">
            <summary>
            Collocation that expresses positive sentiment towards object
            </summary>
        </member>
        <member name="T:Linguistics.Core.TextMining.SentimentAnalysisContext">
            <summary>
            Class that is supposed to collect debug and rules information
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.GetOperateRules">
            <summary>
            Returns list of applied rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.GetLogRecords">
            <summary>
            Returns log records
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.GetProcessingSteps">
            <summary>
            Returns processing steps
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.AddProcessingState(System.String,System.String)">
            <summary>
            Adds new processing step
            </summary>
            <param name="stageName"></param>
            <param name="state"></param>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.MatchRuleDebugInfoOutput(System.String,System.Xml.Linq.XElement)">
            <summary>
            Log rule match
            </summary>
            <param name="ruleId"></param>
            <param name="element"></param>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.MatchActionDebugInfoOutput(System.String,System.Int32)">
            <summary>
            Logs action match
            </summary>
            <param name="ruleId"></param>
            <param name="actionPosition"></param>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.MatchActionDebugInfoOutput(System.String)">
            <summary>
            Logs match
            </summary>
            <param name="ruleId"></param>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.NomatchActionDebugInfoOutput(System.String)">
            <summary>
            Logs nomatch
            </summary>
            <param name="ruleId"></param>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.DebugInfo(System.String)">
            <summary>
            logs message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Linguistics.Core.TextMining.SentimentAnalysisContext.IncrementCounterAndDebugMatch(System.String)">
            <summary>
            increments counter and debugs match
            </summary>
            <param name="ruleId"></param>
        </member>
        <member name="P:Linguistics.Core.TextMining.SentimentAnalysisContext.Counter">
            <summary>
            Returns counter value
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.LanguageType">
            <summary>
            Language s list
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.LanguageType.RU">
            <summary>
            Russian language
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.LanguageType.EN">
            <summary>
            English language
            </summary>
        </member>
        <member name="T:Linguistics.TextMining.Nouns">
            <summary>
            Noun sentiment type
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Nouns.nNeut">
            <summary>
            neutral
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Nouns.nANeg">
            <summary>
            action_negative
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Nouns.nAPos">
            <summary>
            action_positive
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Nouns.nNeg">
            <summary>
            negative
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Nouns.nPos">
            <summary>
            positive
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Nouns.nPNeg">
            <summary>
            potential_negative
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Nouns.nPPos">
            <summary>
            potential_positive
            </summary>
        </member>
        <member name="T:Linguistics.TextMining.ObjectAllocateMethod">
            <summary>
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.ObjectAllocateMethod.PhysicalOrJuridicalPersons">
            <summary>
            physical-or-juridical-persons
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.ObjectAllocateMethod.FirstEntityWithRoleSubj">
            <summary>
            0x3 first-entity-with-role-subj
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.ObjectAllocateMethod.FirstEntityWithTypePronoun">
            <summary>
            0x7, first-entity-with-type-pronoun
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.ObjectAllocateMethod.FirstVerbEntityWithRoleObj">
            <summary>
            ONLY FOR TEST PURPOSES ONLY!
            </summary>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.Digest.ObjectEntity">
            <summary>
            object entity representation
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.Digest.ObjectEntity.SubjectAnaphoriaTuple">
            <summary>
            Tuple
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.Digest.ObjectEntity.IsSubjectIndeed">
            <summary>
            Is it subject
            </summary>
        </member>
        <member name="T:Linguistics.Core.OpinionMining.Essence">
            <summary>
            </summary>
        </member>
        <member name="F:Linguistics.Core.OpinionMining.Essence.ServiceFunctions">
            <summary>
            inner essence
            </summary>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.Essence.#ctor">
            <summary>
            Creates new essence
            </summary>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.Essence.#ctor(Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple)">
            <summary>
            creates new essence
            </summary>
            <param name="tuple"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.Essence.SetEssenceItems4Homogeneous(System.Collections.ObjectModel.ReadOnlyCollection{Linguistics.Core.TextMining.Opinion.Essences.EssenceItem})">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.Essence.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.Essence.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.Essence.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.Essence.CreateCopy(System.Xml.Linq.XElement)">
            <summary>
            Creates copy of essence
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.Essence.EssenceItems">
            <summary>
            Inner essences
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.Essence.AnaphoriaAndEntityTuple">
            <summary>
            tuple
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.Essence.Entity">
            <summary>
            entity
            </summary>
        </member>
        <member name="T:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem">
            <summary>
            </summary>
        </member>
        <member name="F:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem.UndefinedValue">
            <summary>
            Constant value for unknown subject
            </summary>
        </member>
        <member name="F:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem.ServiceFunctions">
            <summary>
            inner service functions
            </summary>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem.#ctor(System.String,System.String,Linguistics.Core.Enums.TypeValues)">
            <summary>
            Creates new essence with defined main noun, value and type
            </summary>
            <param name="value"></param>
            <param name="prof"></param>
            <param name="type"></param>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem.Prof">
            <summary>
            Prof attribute value
            </summary>
        </member>
        <member name="P:Linguistics.Core.TextMining.Opinion.Essences.EssenceItem.Type">
            <summary>
            type
            </summary>
        </member>
        <member name="T:Linguistics.Core.OpinionMining.ObjectEssence">
            <summary>
            </summary>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.ObjectEssence.#ctor(Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple,System.Boolean)">
            <summary>
            Creates new essence
            </summary>
            <param name="tuple"></param>
            <param name="isSubjectIndeed"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.ObjectEssence.#ctor(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Creates new essence
            </summary>
            <param name="entity"></param>
            <param name="isSubjectIndeed"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.ObjectEssence.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.ObjectEssence.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.ObjectEssence.CreateCopy(System.Xml.Linq.XElement)">
            <summary>
            Creates copy
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.ObjectEssence.IsSubjectIndeed">
            <summary>
            Indicates that is subject
            </summary>
        </member>
        <member name="T:Linguistics.Core.OpinionMining.SubjectEssence">
            <summary>
            TODO comment
            </summary>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectEssence.#ctor(Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple)">
            <summary>
            Creates new essence
            </summary>
            <param name="tuple"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectEssence.#ctor(Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple,System.Xml.Linq.XElement)">
            <summary>
            Creates new essence
            </summary>
            <param name="tuple"></param>
            <param name="verb"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectEssence.#ctor(Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple,System.String)">
            <summary>
            Creates new essence
            </summary>
            <param name="tuple"></param>
            <param name="verbValue"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectEssence.#ctor(Linguistics.Core.OpinionMining.SubjectEssence,System.String)">
            <summary>
            Create
            </summary>
            <param name="subjectEssence"></param>
            <param name="verbValue"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectEssence.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectEssence.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectEssence.CreateCopy(System.Xml.Linq.XElement)">
            <summary>
            Create copy of essence
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectEssence.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectEssence.ToObjectEssence">
            <summary>
            Convert to object essence
            </summary>
            <returns></returns>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.SubjectEssence.Author">
            <summary>
            Constant author instance
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.SubjectEssence.Verb">
            <summary>
            Verb's xml
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.SubjectEssence.VerbValue">
            <summary>
            verb value
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.SubjectEssence.IsAuthor">
            <summary>
            Indicates that is author
            </summary>
        </member>
        <member name="T:Linguistics.Core.OpinionMining.FilterBySynonyms">
            <summary>
            </summary>
        </member>
        <member name="F:Linguistics.Core.OpinionMining.FilterBySynonyms.UNDEFINE">
            <summary>
            undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.OpinionMining.FilterBySynonyms.Subject">
            <summary>
            пара отфильтрована по значению субъекта
            </summary>
        </member>
        <member name="F:Linguistics.Core.OpinionMining.FilterBySynonyms.Object">
            <summary>
            пара отфильтрована по значению объекта
            </summary>
        </member>
        <member name="F:Linguistics.Core.OpinionMining.FilterBySynonyms.SubjectAndObject">
            <summary>
            пара отфильтрована по значению субъекта и объекта
            </summary>
        </member>
        <member name="T:Linguistics.Core.OpinionMining.ObjectEntityEqualityComparer">
            <summary>
            </summary>
        </member>
        <member name="T:Linguistics.Core.OpinionMining.ObjectEssenceEqualityComparer">
            <summary>
            </summary>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.ObjectEssenceEqualityComparer.Equals(Linguistics.Core.OpinionMining.ObjectEssence,Linguistics.Core.OpinionMining.ObjectEssence)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.ObjectEssenceEqualityComparer.GetHashCode(Linguistics.Core.OpinionMining.ObjectEssence)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.ObjectEssenceEqualityComparer.Instance">
            <summary>
            Comparer instance
            </summary>
        </member>
        <member name="T:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple">
            <summary>
            subject and anaphoria tuple
            </summary>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple.#ctor(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Crate new tuple
            </summary>
            <param name="subjectEntity"></param>
            <param name="anaphoriaLinkedEntity"></param>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The object to compare with the current object. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple.Entity">
            <summary>
            Entity xml
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaEntityTuple.Anaphoria">
            <summary>
            Anaphoria xml
            </summary>
        </member>
        <member name="T:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaTuple">
            <summary>
            Anaphoria tuple
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaTuple.SubjectXml">
            <summary>
            subject xml
            </summary>
        </member>
        <member name="P:Linguistics.Core.OpinionMining.SubjectAndAnaphoriaTuple.AnaphoriaXml">
            <summary>
            Anaphoria xml
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.RoleValues">
            <summary>
                Роль сущности в предложении
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.RoleValues.Adj">
            <summary>
                Обстоятельство
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.RoleValues.Adjective">
            <summary>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.RoleValues.Adverb">
            <summary>
                Наречие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.RoleValues.Obj">
            <summary>
                Дополнение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.RoleValues.Other">
            <summary>
                Другая
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.RoleValues.Subj">
            <summary>
                Подлежащее
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.RoleValues.Enum">
            <summary>
                self-creating-new-type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.RoleValues.ObjAdj">
            <summary>
            Object as adjective
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.RoleValues.AdjObj">
            <summary>
            Adjective as object
            </summary>
        </member>
        <member name="T:Linguistics.ServiceInterfaces.DataContracts.Digest.SubjectEntity">
            <summary>
            Subject ebtity
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.Digest.SubjectEntity.VerbXml">
            <summary>
            Verb xml
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.Digest.SubjectEntity.VerbValue">
            <summary>
            Verb's value
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.Digest.SubjectEntity.SubjectAnaphoriaTuple">
            <summary>
            Tuple
            </summary>
        </member>
        <member name="P:Linguistics.ServiceInterfaces.DataContracts.Digest.SubjectEntity.IsAuthor">
            <summary>
            Flag that indicates that subject is author
            </summary>
        </member>
        <member name="T:Linguistics.Core.Enums.TypeValues">
            <summary>
                Тип сущности
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Adverb">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Adverb"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Conjunction">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Conjunction"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Default">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Default"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Date">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Date"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Deepr">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Deepr"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Homogeneous">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Homogeneous"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Numeric">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Numeric"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.NounVerb">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.NounVerb"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Participle">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Participle"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.PersonName">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.PersonName"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.PersonInfo">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.PersonInfo"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.PersonNoInfo">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.PersonNoInfo"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.PlaceName">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.PlaceName"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.PlaceNoInfo">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.PlaceNoInfo"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Predicative">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Predicative"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Pretext">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Pretext"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Pronoun">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Pronoun"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.OrgName">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.OrgName"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.OrgAbbr">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.OrgAbbr"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.OrgNoInfo">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.OrgNoInfo"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Unknown">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Unknown"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.UnknownProper">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.UnknownProper"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Verb">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Verb"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.PseudoGeo">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.PseudoGeo"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Quote">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Quote"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Adjective">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Adjective"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.ShortAdjective">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.ShortAdjective"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Address">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Address"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Email">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Email"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.BankAccount">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.BankAccount"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.URL">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.URL"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Phone">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Phone"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.INN">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.INN"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Money">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Money"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Slogan">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Slogan"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Index">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Index"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Street">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Street"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.House">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.House"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Corps">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Corps"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Building">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Building"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Flat">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Flat"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Distance">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Distance"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Weight">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Weight"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Event">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Event"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Product">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Product"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.QuestionWord">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.QuestionWord"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Infinitive">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Infinitive"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Comparative">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Comparative"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Superlative">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Superlative"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.OGRN">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.OGRN"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.OKPO">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.OKPO"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.SNILS">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.SNILS"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Bank">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Bank"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Law">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Law"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.LawInfo">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.LawInfo"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.LawProposal">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.LawProposal"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Petrochemicals">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Petrochemicals"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.InformationAgency">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.InformationAgency"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.NounPred">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.NounPred"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.UnknownDate">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.UnknownDate"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.UnknownMoney">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.UnknownMoney"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.TwitterName">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.TwitterName"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.LJname">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.LJname"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Hashtag">
            <summary>
            <see cref="F:Linguistics.Core.Enums.EntityType.Hashtag"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Collocation">
             <summary>
            Тип созданных элементов 'ENTITY' для колокаций
             </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Participial">
            <summary>
            Тип созданных фиктивных элементов 'ENTITIES'
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.DanglingParticiple">
            <summary>
            Тип созданных фиктивных элементов 'ENTITIES'
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Subordinate">
            <summary>
            Тип созданных фиктивных элементов 'ENTITIES'
            </summary>
        </member>
        <member name="F:Linguistics.Core.Enums.TypeValues.Inquiry">
            <summary>
            Тип Объект мониторинга
            </summary>
        </member>
        <member name="T:Linguistics.TextMining.Verbs">
            <summary>
            Types of verb's sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vNeut">
            <summary>
            indicates that verb's tonality is undefined
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vFlxNeg">
            <summary>
            indicates that verb is self-negative
            <remarks>(reflexes negative effect on itself)</remarks>
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vFlxPos">
            <summary>
            indicates that verb is self-positive
            <remarks>(reflexes positive effect on itself)</remarks>
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vLink">
            <summary>
            indicates that sentiment should be extracted elsewhere
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vNeg">
            <summary>
            Verb with negative sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vPos">
            <summary>
            Verb with positive sentiment
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vNegP">
            <summary>
            Verb is stated negative regardless of context
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vPosP">
            <summary>
            Verb is stated positive regardless of context
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vOppPos">
            <summary>
            Indicates that object is negative while subject is positive
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vOppNeg">
            <summary>
            Indicates that subject is negative while object is positive
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vObjNeg">
            <summary>
            Indicates that only object is negative
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vObjPos">
            <summary>
            Indicates that only object is positive
            </summary>
        </member>
        <member name="F:Linguistics.TextMining.Verbs.vObjLink">
            <summary>
            States that subject is neutral while object is context-dependent
            </summary>
        </member>
        <member name="T:Linguistics.Core.Tonality.InquiryAllocateStatus">
            <summary>
            inquiry statuses
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.InquiryAllocateStatus.Allocated">
            <summary>
            Allocated status
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.InquiryAllocateStatus.NotAllocated">
            <summary>
            Not allocated status
            </summary>
        </member>
        <member name="T:Linguistics.Core.Tonality.TonalityType">
            <summary>
            United tonality sentiment types
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.__UNDEFINE__">
            <summary>
            undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.nNeut">
            <summary>
            <see cref="F:Linguistics.TextMining.Nouns.nNeut"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.nANeg">
            <summary>
            <see cref="F:Linguistics.TextMining.Nouns.nANeg"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.nAPos">
            <summary>
            <see cref="F:Linguistics.TextMining.Nouns.nAPos"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.nNeg">
            <summary>
            <see cref="F:Linguistics.TextMining.Nouns.nNeg"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.nPos">
            <summary>
            <see cref="F:Linguistics.TextMining.Nouns.nPos"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.nPNeg">
            <summary>
            <see cref="F:Linguistics.TextMining.Nouns.nPNeg"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.nPPos">
            <summary>
            <see cref="F:Linguistics.TextMining.Nouns.nPPos"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vNeut">
            <summary>
            indicates that verb's tonality is undefined
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vFlxNeg">
            <summary>
            indicates that verb is self-negative
            <remarks>(reflexes negative effect on itself)</remarks>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vFlxPos">
            <summary>
            indicates that verb is self-positive
            <remarks>(reflexes positive effect on itself)</remarks>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vLink">
            <summary>
            indicates that sentiment should be extracted elsewhere
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vNeg">
            <summary>
            Verb with negative sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vPos">
            <summary>
            Verb with positive sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vNegP">
            <summary>
            Verb is stated negative regardless of context
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vPosP">
            <summary>
            Verb is stated positive regardless of context
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vOppPos">
            <summary>
            Indicates that object is negative while subject is positive
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vOppNeg">
            <summary>
            Indicates that subject is negative while object is positive
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vObjNeg">
            <summary>
            Indicates that only object is negative
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vObjPos">
            <summary>
            Indicates that only object is positive
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.vObjLink">
            <summary>
            States that subject is neutral while object is context-dependent
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.adjNeut">
            <summary>
            <see cref="F:Linguistics.TextMining.Adjectives.adjNeut"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.adjNeg">
            <summary>
            <see cref="F:Linguistics.TextMining.Adjectives.adjNeg"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.adjPos">
            <summary>
            <see cref="F:Linguistics.TextMining.Adjectives.adjPos"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.adjAmplf">
            <summary>
            <see cref="F:Linguistics.TextMining.Adjectives.adjAmplf"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.advNeut">
            <summary>
            <see cref="F:Linguistics.TextMining.Adverbs.advNeut"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.advNeg">
            <summary>
            <see cref="F:Linguistics.TextMining.Adverbs.advNeg"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.advPos">
            <summary>
            <see cref="F:Linguistics.TextMining.Adverbs.advPos"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.advAmplf">
            <summary>
            <see cref="F:Linguistics.TextMining.Adverbs.advAmplf"/>
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.collNeut">
            <summary>
            Collocation that doesn't express any sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.collNeg">
            <summary>
            Collocation that expresses negative sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.collPos">
            <summary>
            Collocation that expresses positive sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.collAmplf">
            <summary>
            Collocation that amplifies existing sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.collvNeg">
            <summary>
            Verbal-collocation that expresses negative sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.collvPos">
            <summary>
            Verbal-collocation that expresses positive sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.collvNeut">
            <summary>
            Verbal-collocation that doesn't express any sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.collvObjNeg">
            <summary>
            Collocation that expresses negative sentiment towards object
            </summary>
        </member>
        <member name="F:Linguistics.Core.Tonality.TonalityType.collvObjPos">
            <summary>
            Collocation that expresses positive sentiment towards object
            </summary>
        </member>
        <member name="T:Linguistics.Core.Tonality.TonalityTypeExtensions">
            <summary>
            Sentiment extensions
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.RDF">
            <summary>
                Константы RDF
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.ValueSeparator">
            <summary>
                Разделитель внутри атрибутов между несколькими значениями
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.RDF.Values">
            <summary>
            Contains constant values
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Values.TRUE">
            <summary>
            True value
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.RDF.TextUnit">
            <summary>
            Class that contains units types string representation
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.TEXT">
            <summary>
            Text container element name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.U">
            <summary>
                Неразмеченный текст
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.T">
            <summary>
                внутренний элемент сущностей
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.THEME">
            <summary>
            Theme text element
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.THEMES">
            <summary>
            Theme text element
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.ENTITY">
            <summary>
                Сущность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.ENTITIES">
            <summary>
            Entities Collection node type
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.VERB">
            <summary>
                Формы глагола: глагол, причастие и деепричастие
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.CET">
            <summary>
                Вспомогательные сущности: предлог, наречие, предикатив
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.SENT">
            <summary>
                Предложение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.SUB_SENT">
            <summary>
                Подпредложение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.TextUnit.Undefined">
            <summary>
            Undefined text element type
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.RDF.Attr">
            <summary>
                Атрибуты
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Language">
            <summary>
                Язык предложения
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.ID">
            <summary>
                Идентификатор
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.IsFiltered">
            <summary>
            not theme indicator attribute name
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.StartPosition">
            <summary>
                Стартовая позиция
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Link">
            <summary>
                Ссылка на сущность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Subject">
            <summary>
                Подлежащее подпредложения
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.IsPassiveSubject">
            <summary>
                Пассивный субъект
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Type">
            <summary>
                Тип
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.VerbTense">
            <summary>
            Verb tense attribute
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Value">
            <summary>
                Нормализованное значение
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.ValueCore">
            <summary>
            Theme real value
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.MorphoInformation">
            <summary>
                Морфологическая информация
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Role">
            <summary>
                Роль сущности
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.MainNoun">
            <summary>
                Главное существительное
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Prefix">
            <summary>
                Прилагательные перед главным существительным
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Adjectives">
            <summary>
                Все прилагательные цепочки
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.PseudoPlace">
            <summary>
                Флаг географии
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Themes">
            <summary>
                Темы
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.FirstName">
            <summary>
                Имя
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.LastName">
            <summary>
                Фамилия
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.MiddleName">
            <summary>
                Отчество
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Post">
            <summary>
                Должность
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.PostObject">
            <summary>
                Объект должности
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.FullName">
            <summary>
                Значение после разрешения анафории/кореферентности
            </summary>
        </member>
        <member name="T:Linguistics.Core.Constants.RDF.Attr.Tonal">
            <summary>
            Tonality-specific attributes
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Tonal.INQUIRYINITIAL">
            <summary>
            
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Tonal.SNT">
            <summary>
                Sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Tonal.FRT">
            <summary>
                Sentiment strength
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Tonal.SNTFINAL">
            <summary>
                Sentence (subsentence) sentiment
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Tonal.FRTFINAL">
            <summary>
                Sentence (subsentence) sentiment strength
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Tonal.TYPE_SAVED">
            <summary>
                Attribute contains initial type if entity was marked as Inquiry
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Tonal.TYPE_VALUE_INQUIRY">
            <summary>
                Value of Type attribute for entities that should be processed with tonality
            </summary>
        </member>
        <member name="F:Linguistics.Core.Constants.RDF.Attr.Tonal.FIRST_QUEUE_SUBSENT_ATTRIBUTE">
            <summary>
            Value that indicates that sentence has been processed with all rules
            </summary>
        </member>
        <member name="T:Linguistics.Core.Interfaces.Workers.IFilesWorker">
            <summary>
            Describes interface of class that works with files
            </summary>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IFilesWorker.ReadList(System.Text.Encoding,System.Boolean,System.String[])">
            <summary>
            Чтение словаря
            </summary>
            <param name="paths">path parts</param>
            <param name="encoding">кодировка</param>
            <param name="readLower">indicates that read values should be in lower registry</param>
            <returns>список считанных строк</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IFilesWorker.ReadHashSet(System.Text.Encoding,System.Boolean,System.String[])">
            <summary>
            Чтение словаря
            </summary>
            <param name="paths">path parts</param>
            <param name="encoding">кодировка</param>
            <param name="readLower">indicates that read values should be in lower registry</param>
            <returns>список считанных строк</returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IFilesWorker.ReadXElement(System.String[])">
            <summary>
            Reads XElement from disk
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:Linguistics.Core.Interfaces.Workers.IFilesWorker.GetReadStream(System.String)">
            <summary>
            Returns stream to file
            </summary>
            <param name="pathToFile"></param>
            <returns></returns>
        </member>
    </members>
</doc>
